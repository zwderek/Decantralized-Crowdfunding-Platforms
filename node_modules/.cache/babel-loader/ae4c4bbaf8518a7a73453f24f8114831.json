{"ast":null,"code":"let t = t => \"object\" == typeof t && null != t && 1 === t.nodeType,\n    e = (t, e) => (!e || \"hidden\" !== t) && \"visible\" !== t && \"clip\" !== t,\n    n = (t, n) => {\n  if (t.clientHeight < t.scrollHeight || t.clientWidth < t.scrollWidth) {\n    let l = getComputedStyle(t, null);\n    return e(l.overflowY, n) || e(l.overflowX, n) || (t => {\n      let e = (t => {\n        if (!t.ownerDocument || !t.ownerDocument.defaultView) return null;\n\n        try {\n          return t.ownerDocument.defaultView.frameElement;\n        } catch (t) {\n          return null;\n        }\n      })(t);\n\n      return !!e && (e.clientHeight < t.scrollHeight || e.clientWidth < t.scrollWidth);\n    })(t);\n  }\n\n  return !1;\n},\n    l = (t, e, n, l, i, o, r, d) => o < t && r > e || o > t && r < e ? 0 : o <= t && d <= n || r >= e && d >= n ? o - t - l : r > e && d < n || o < t && d > n ? r - e + i : 0,\n    i = t => {\n  let e = t.parentElement;\n  return null == e ? t.getRootNode().host || null : e;\n},\n    o = (e, o) => {\n  var r, d, h, f;\n  if (\"undefined\" == typeof document) return [];\n  let {\n    scrollMode: u,\n    block: s,\n    inline: c,\n    boundary: a,\n    skipOverflowHiddenElements: g\n  } = o,\n      m = \"function\" == typeof a ? a : t => t !== a;\n  if (!t(e)) throw new TypeError(\"Invalid target\");\n  let p = document.scrollingElement || document.documentElement,\n      w = [],\n      W = e;\n\n  for (; t(W) && m(W);) {\n    if (W = i(W), W === p) {\n      w.push(W);\n      break;\n    }\n\n    null != W && W === document.body && n(W) && !n(document.documentElement) || null != W && n(W, g) && w.push(W);\n  }\n\n  let H = null != (d = null == (r = window.visualViewport) ? void 0 : r.width) ? d : innerWidth,\n      b = null != (f = null == (h = window.visualViewport) ? void 0 : h.height) ? f : innerHeight,\n      {\n    scrollX: v,\n    scrollY: y\n  } = window,\n      {\n    height: E,\n    width: M,\n    top: x,\n    right: I,\n    bottom: C,\n    left: R\n  } = e.getBoundingClientRect(),\n      T = \"start\" === s || \"nearest\" === s ? x : \"end\" === s ? C : x + E / 2,\n      V = \"center\" === c ? R + M / 2 : \"end\" === c ? I : R,\n      k = [];\n\n  for (let t = 0; t < w.length; t++) {\n    let e = w[t],\n        {\n      height: n,\n      width: i,\n      top: o,\n      right: r,\n      bottom: d,\n      left: h\n    } = e.getBoundingClientRect();\n    if (\"if-needed\" === u && x >= 0 && R >= 0 && C <= b && I <= H && x >= o && C <= d && R >= h && I <= r) return k;\n    let f = getComputedStyle(e),\n        a = parseInt(f.borderLeftWidth, 10),\n        g = parseInt(f.borderTopWidth, 10),\n        m = parseInt(f.borderRightWidth, 10),\n        W = parseInt(f.borderBottomWidth, 10),\n        B = 0,\n        D = 0,\n        L = \"offsetWidth\" in e ? e.offsetWidth - e.clientWidth - a - m : 0,\n        S = \"offsetHeight\" in e ? e.offsetHeight - e.clientHeight - g - W : 0,\n        X = \"offsetWidth\" in e ? 0 === e.offsetWidth ? 0 : i / e.offsetWidth : 0,\n        Y = \"offsetHeight\" in e ? 0 === e.offsetHeight ? 0 : n / e.offsetHeight : 0;\n    if (p === e) B = \"start\" === s ? T : \"end\" === s ? T - b : \"nearest\" === s ? l(y, y + b, b, g, W, y + T, y + T + E, E) : T - b / 2, D = \"start\" === c ? V : \"center\" === c ? V - H / 2 : \"end\" === c ? V - H : l(v, v + H, H, a, m, v + V, v + V + M, M), B = Math.max(0, B + y), D = Math.max(0, D + v);else {\n      B = \"start\" === s ? T - o - g : \"end\" === s ? T - d + W + S : \"nearest\" === s ? l(o, d, n, g, W + S, T, T + E, E) : T - (o + n / 2) + S / 2, D = \"start\" === c ? V - h - a : \"center\" === c ? V - (h + i / 2) + L / 2 : \"end\" === c ? V - r + m + L : l(h, r, i, a, m + L, V, V + M, M);\n      let {\n        scrollLeft: t,\n        scrollTop: f\n      } = e;\n      B = Math.max(0, Math.min(f + B / Y, e.scrollHeight - n / Y + S)), D = Math.max(0, Math.min(t + D / X, e.scrollWidth - i / X + L)), T += f - B, V += t - D;\n    }\n    k.push({\n      el: e,\n      top: B,\n      left: D\n    });\n  }\n\n  return k;\n};\n\nexport { o as compute };","map":{"version":3,"mappings":"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","names":["isElement","el","nodeType","canOverflow","overflow","skipOverflowHiddenElements","isScrollable","clientHeight","scrollHeight","clientWidth","scrollWidth","getComputedStyle","style","overflowY","overflowX","ownerDocument","defaultView","frameElement","e","frame","alignNearest","scrollingEdgeStart","scrollingEdgeEnd","scrollingSize","scrollingBorderStart","scrollingBorderEnd","elementEdgeStart","elementEdgeEnd","elementSize","getParentElement","element","parent","parentElement","getRootNode","host","compute","target","options","document","scrollMode","block","inline","boundary","checkBoundary","node","TypeError","scrollingElement","documentElement","frames","cursor","push","body","viewportWidth","visualViewport","width","_b","innerWidth","viewportHeight","height","_d","innerHeight","scrollX","scrollY","window","targetHeight","targetWidth","top","targetTop","right","targetRight","bottom","targetBottom","left","targetLeft","getBoundingClientRect","targetBlock","targetInline","computations","index","length","borderLeft","parseInt","frameStyle","borderLeftWidth","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","blockScroll","inlineScroll","scrollbarWidth","offsetWidth","scrollbarHeight","offsetHeight","scaleX","scaleY","Math","max","scrollLeft","scrollTop","min"],"sources":["D:\\year4sem2\\evmos\\campaign\\node_modules\\compute-scroll-into-view\\src\\index.ts"],"sourcesContent":["// Compute what scrolling needs to be done on required scrolling boxes for target to be in view\n\n// The type names here are named after the spec to make it easier to find more information around what they mean:\n// To reduce churn and reduce things that need be maintained things from the official TS DOM library is used here\n// https://drafts.csswg.org/cssom-view/\n\n// For a definition on what is \"block flow direction\" exactly, check this: https://drafts.csswg.org/css-writing-modes-4/#block-flow-direction\n\n/**\n * This new option is tracked in this PR, which is the most likely candidate at the time: https://github.com/w3c/csswg-drafts/pull/1805\n * @public\n */\nexport type ScrollMode = 'always' | 'if-needed'\n\n/** @public */\nexport interface Options {\n  /**\n   * Control the logical scroll position on the y-axis. The spec states that the `block` direction is related to the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode), but this is not implemented yet in this library.\n   * This means that `block: 'start'` aligns to the top edge and `block: 'end'` to the bottom.\n   * @defaultValue 'center'\n   */\n  block?: ScrollLogicalPosition\n  /**\n   * Like `block` this is affected by the [writing-mode](https://developer.mozilla.org/en-US/docs/Web/CSS/writing-mode). In left-to-right pages `inline: 'start'` will align to the left edge. In right-to-left it should be flipped. This will be supported in a future release.\n   * @defaultValue 'nearest'\n   */\n  inline?: ScrollLogicalPosition\n  /**\n   * This is a proposed addition to the spec that you can track here: https://github.com/w3c/csswg-drafts/pull/5677\n   *\n   * This library will be updated to reflect any changes to the spec and will provide a migration path.\n   * To be backwards compatible with `Element.scrollIntoViewIfNeeded` if something is not 100% visible it will count as \"needs scrolling\". If you need a different visibility ratio your best option would be to implement an [Intersection Observer](https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API).\n   * @defaultValue 'always'\n   */\n  scrollMode?: ScrollMode\n  /**\n   * By default there is no boundary. All the parent elements of your target is checked until it reaches the viewport ([`document.scrollingElement`](https://developer.mozilla.org/en-US/docs/Web/API/document/scrollingElement)) when calculating layout and what to scroll.\n   * By passing a boundary you can short-circuit this loop depending on your needs:\n   * \n   * - Prevent the browser window from scrolling.\n   * - Scroll elements into view in a list, without scrolling container elements.\n   * \n   * You can also pass a function to do more dynamic checks to override the scroll scoping:\n   * \n   * ```js\n   * let actions = compute(target, {\n   *   boundary: (parent) => {\n   *     // By default `overflow: hidden` elements are allowed, only `overflow: visible | clip` is skipped as\n   *     // this is required by the CSSOM spec\n   *     if (getComputedStyle(parent)['overflow'] === 'hidden') {\n   *       return false\n   *     }\n\n   *     return true\n   *   },\n   * })\n   * ```\n   * @defaultValue null\n   */\n  boundary?: Element | ((parent: Element) => boolean) | null\n  /**\n   * New option that skips auto-scrolling all nodes with overflow: hidden set\n   * See FF implementation: https://hg.mozilla.org/integration/fx-team/rev/c48c3ec05012#l7.18\n   * @defaultValue false\n   * @public\n   */\n  skipOverflowHiddenElements?: boolean\n}\n\n/** @public */\nexport interface ScrollAction {\n  el: Element\n  top: number\n  left: number\n}\n\n// @TODO better shadowdom test, 11 = document fragment\nlet isElement = (el: any): el is Element =>\n  typeof el === 'object' && el != null && el.nodeType === 1\n\nlet canOverflow = (\n  overflow: string | null,\n  skipOverflowHiddenElements?: boolean\n) => {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip'\n}\n\nlet getFrameElement = (el: Element) => {\n  if (!el.ownerDocument || !el.ownerDocument.defaultView) {\n    return null\n  }\n\n  try {\n    return el.ownerDocument.defaultView.frameElement\n  } catch (e) {\n    return null\n  }\n}\n\nlet isHiddenByFrame = (el: Element): boolean => {\n  let frame = getFrameElement(el)\n  if (!frame) {\n    return false\n  }\n\n  return (\n    frame.clientHeight < el.scrollHeight || frame.clientWidth < el.scrollWidth\n  )\n}\n\nlet isScrollable = (el: Element, skipOverflowHiddenElements?: boolean) => {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    let style = getComputedStyle(el, null)\n    return (\n      canOverflow(style.overflowY, skipOverflowHiddenElements) ||\n      canOverflow(style.overflowX, skipOverflowHiddenElements) ||\n      isHiddenByFrame(el)\n    )\n  }\n\n  return false\n}\n/**\n * Find out which edge to align against when logical scroll position is \"nearest\"\n * Interesting fact: \"nearest\" works similarily to \"if-needed\", if the element is fully visible it will not scroll it\n *\n * Legends:\n * ┌────────┐ ┏ ━ ━ ━ ┓\n * │ target │   frame\n * └────────┘ ┗ ━ ━ ━ ┛\n */\nlet alignNearest = (\n  scrollingEdgeStart: number,\n  scrollingEdgeEnd: number,\n  scrollingSize: number,\n  scrollingBorderStart: number,\n  scrollingBorderEnd: number,\n  elementEdgeStart: number,\n  elementEdgeEnd: number,\n  elementSize: number\n) => {\n  /**\n   * If element edge A and element edge B are both outside scrolling box edge A and scrolling box edge B\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓\n   *          │  │\n   *        ┃ │  │ ┃        do nothing\n   *          │  │\n   *        ┗━│━━│━┛\n   *          └──┘\n   *\n   *  If element edge C and element edge D are both outside scrolling box edge C and scrolling box edge D\n   *\n   *    ┏ ━ ━ ━ ━ ┓\n   *   ┌───────────┐\n   *   │┃         ┃│        do nothing\n   *   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart < scrollingEdgeStart &&\n      elementEdgeEnd > scrollingEdgeEnd) ||\n    (elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd)\n  ) {\n    return 0\n  }\n\n  /**\n   * If element edge A is outside scrolling box edge A and element height is less than scrolling box height\n   *\n   *          ┌──┐\n   *        ┏━│━━│━┓         ┏━┌━━┐━┓\n   *          └──┘             │  │\n   *  from  ┃      ┃     to  ┃ └──┘ ┃\n   *\n   *        ┗━ ━━ ━┛         ┗━ ━━ ━┛\n   *\n   * If element edge B is outside scrolling box edge B and element height is greater than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━┌━━┐━┓\n   *                           │  │\n   *  from  ┃ ┌──┐ ┃     to  ┃ │  │ ┃\n   *          │  │             │  │\n   *        ┗━│━━│━┛         ┗━│━━│━┛\n   *          │  │             └──┘\n   *          │  │\n   *          └──┘\n   *\n   * If element edge C is outside scrolling box edge C and element width is less than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───┐                 ┌───┐\n   *  │ ┃ │       ┃         ┃   │     ┃\n   *  └───┘                 └───┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is greater than scrolling box width\n   *\n   *       from                 to\n   *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *        ┌───────────┐   ┌───────────┐\n   *    ┃   │     ┃     │   ┃         ┃ │\n   *        └───────────┘   └───────────┘\n   *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   */\n  if (\n    (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize) ||\n    (elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize)\n  ) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart\n  }\n\n  /**\n   * If element edge B is outside scrolling box edge B and element height is less than scrolling box height\n   *\n   *        ┏━ ━━ ━┓         ┏━ ━━ ━┓\n   *\n   *  from  ┃      ┃     to  ┃ ┌──┐ ┃\n   *          ┌──┐             │  │\n   *        ┗━│━━│━┛         ┗━└━━┘━┛\n   *          └──┘\n   *\n   * If element edge A is outside scrolling box edge A and element height is greater than scrolling box height\n   *\n   *          ┌──┐\n   *          │  │\n   *          │  │             ┌──┐\n   *        ┏━│━━│━┓         ┏━│━━│━┓\n   *          │  │             │  │\n   *  from  ┃ └──┘ ┃     to  ┃ │  │ ┃\n   *                           │  │\n   *        ┗━ ━━ ━┛         ┗━└━━┘━┛\n   *\n   * If element edge C is outside scrolling box edge C and element width is greater than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *  ┌───────────┐           ┌───────────┐\n   *  │     ┃     │   ┃       │ ┃         ┃\n   *  └───────────┘           └───────────┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   * If element edge D is outside scrolling box edge D and element width is less than scrolling box width\n   *\n   *           from                 to\n   *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n   *                ┌───┐             ┌───┐\n   *        ┃       │ ┃ │       ┃     │   ┃\n   *                └───┘             └───┘\n   *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n   *\n   */\n  if (\n    (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize) ||\n    (elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize)\n  ) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd\n  }\n\n  return 0\n}\n\nlet getParentElement = (element: Node): Element | null => {\n  let parent = element.parentElement\n  if (parent == null) {\n    return (element.getRootNode() as ShadowRoot).host || null\n  }\n  return parent\n}\n\n/** @public */\nexport let compute = (target: Element, options: Options): ScrollAction[] => {\n  if (typeof document === 'undefined') {\n    // If there's no DOM we assume it's not in a browser environment\n    return []\n  }\n\n  let { scrollMode, block, inline, boundary, skipOverflowHiddenElements } =\n    options\n  // Allow using a callback to check the boundary\n  // The default behavior is to check if the current target matches the boundary element or not\n  // If undefined it'll check that target is never undefined (can happen as we recurse up the tree)\n  let checkBoundary =\n    typeof boundary === 'function' ? boundary : (node: any) => node !== boundary\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target')\n  }\n\n  // Used to handle the top most element that can be scrolled\n  let scrollingElement = document.scrollingElement || document.documentElement\n\n  // Collect all the scrolling boxes, as defined in the spec: https://drafts.csswg.org/cssom-view/#scrolling-box\n  let frames: Element[] = []\n  let cursor: Element | null = target\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    // Move cursor to parent\n    cursor = getParentElement(cursor)\n\n    // Stop when we reach the viewport\n    if (cursor === scrollingElement) {\n      frames.push(cursor)\n      break\n    }\n\n    // Skip document.body if it's not the scrollingElement and documentElement isn't independently scrollable\n    if (\n      cursor != null &&\n      cursor === document.body &&\n      isScrollable(cursor) &&\n      !isScrollable(document.documentElement)\n    ) {\n      continue\n    }\n\n    // Now we check if the element is scrollable, this code only runs if the loop haven't already hit the viewport or a custom boundary\n    if (cursor != null && isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor)\n    }\n  }\n\n  // Support pinch-zooming properly, making sure elements scroll into the visual viewport\n  // Browsers that don't support visualViewport will report the layout viewport dimensions on document.documentElement.clientWidth/Height\n  // and viewport dimensions on window.innerWidth/Height\n  // https://www.quirksmode.org/mobile/viewports2.html\n  // https://bokand.github.io/viewport/index.html\n  let viewportWidth = window.visualViewport?.width ?? innerWidth\n  let viewportHeight = window.visualViewport?.height ?? innerHeight\n  let { scrollX, scrollY } = window\n\n  let {\n    height: targetHeight,\n    width: targetWidth,\n    top: targetTop,\n    right: targetRight,\n    bottom: targetBottom,\n    left: targetLeft,\n  } = target.getBoundingClientRect()\n\n  // These values mutate as we loop through and generate scroll coordinates\n  let targetBlock: number =\n    block === 'start' || block === 'nearest'\n      ? targetTop\n      : block === 'end'\n      ? targetBottom\n      : targetTop + targetHeight / 2 // block === 'center\n  let targetInline: number =\n    inline === 'center'\n      ? targetLeft + targetWidth / 2\n      : inline === 'end'\n      ? targetRight\n      : targetLeft // inline === 'start || inline === 'nearest\n\n  // Collect new scroll positions\n  let computations: ScrollAction[] = []\n  // In chrome there's no longer a difference between caching the `frames.length` to a var or not, so we don't in this case (size > speed anyways)\n  for (let index = 0; index < frames.length; index++) {\n    let frame = frames[index]\n\n    // @TODO add a shouldScroll hook here that allows userland code to take control\n\n    let { height, width, top, right, bottom, left } =\n      frame.getBoundingClientRect()\n\n    // If the element is already visible we can end it here\n    // @TODO targetBlock and targetInline should be taken into account to be compliant with https://github.com/w3c/csswg-drafts/pull/1805/files#diff-3c17f0e43c20f8ecf89419d49e7ef5e0R1333\n    if (\n      scrollMode === 'if-needed' &&\n      targetTop >= 0 &&\n      targetLeft >= 0 &&\n      targetBottom <= viewportHeight &&\n      targetRight <= viewportWidth &&\n      targetTop >= top &&\n      targetBottom <= bottom &&\n      targetLeft >= left &&\n      targetRight <= right\n    ) {\n      // Break the loop and return the computations for things that are not fully visible\n      return computations\n    }\n\n    let frameStyle = getComputedStyle(frame)\n    let borderLeft = parseInt(frameStyle.borderLeftWidth as string, 10)\n    let borderTop = parseInt(frameStyle.borderTopWidth as string, 10)\n    let borderRight = parseInt(frameStyle.borderRightWidth as string, 10)\n    let borderBottom = parseInt(frameStyle.borderBottomWidth as string, 10)\n\n    let blockScroll: number = 0\n    let inlineScroll: number = 0\n\n    // The property existance checks for offfset[Width|Height] is because only HTMLElement objects have them, but any Element might pass by here\n    // @TODO find out if the \"as HTMLElement\" overrides can be dropped\n    let scrollbarWidth =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth -\n          (frame as HTMLElement).clientWidth -\n          borderLeft -\n          borderRight\n        : 0\n    let scrollbarHeight =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight -\n          (frame as HTMLElement).clientHeight -\n          borderTop -\n          borderBottom\n        : 0\n\n    let scaleX =\n      'offsetWidth' in frame\n        ? (frame as HTMLElement).offsetWidth === 0\n          ? 0\n          : width / (frame as HTMLElement).offsetWidth\n        : 0\n    let scaleY =\n      'offsetHeight' in frame\n        ? (frame as HTMLElement).offsetHeight === 0\n          ? 0\n          : height / (frame as HTMLElement).offsetHeight\n        : 0\n\n    if (scrollingElement === frame) {\n      // Handle viewport logic (document.documentElement or document.body)\n\n      if (block === 'start') {\n        blockScroll = targetBlock\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          scrollY,\n          scrollY + viewportHeight,\n          viewportHeight,\n          borderTop,\n          borderBottom,\n          scrollY + targetBlock,\n          scrollY + targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - viewportHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          scrollX,\n          scrollX + viewportWidth,\n          viewportWidth,\n          borderLeft,\n          borderRight,\n          scrollX + targetInline,\n          scrollX + targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      // Apply scroll position offsets and ensure they are within bounds\n      // @TODO add more test cases to cover this 100%\n      blockScroll = Math.max(0, blockScroll + scrollY)\n      inlineScroll = Math.max(0, inlineScroll + scrollX)\n    } else {\n      // Handle each scrolling frame that might exist between the target and the viewport\n      if (block === 'start') {\n        blockScroll = targetBlock - top - borderTop\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(\n          top,\n          bottom,\n          height,\n          borderTop,\n          borderBottom + scrollbarHeight,\n          targetBlock,\n          targetBlock + targetHeight,\n          targetHeight\n        )\n      } else {\n        // block === 'center' is the default\n        blockScroll = targetBlock - (top + height / 2) + scrollbarHeight / 2\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - left - borderLeft\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (left + width / 2) + scrollbarWidth / 2\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth\n      } else {\n        // inline === 'nearest' is the default\n        inlineScroll = alignNearest(\n          left,\n          right,\n          width,\n          borderLeft,\n          borderRight + scrollbarWidth,\n          targetInline,\n          targetInline + targetWidth,\n          targetWidth\n        )\n      }\n\n      let { scrollLeft, scrollTop } = frame\n      // Ensure scroll coordinates are not out of bounds while applying scroll offsets\n      blockScroll = Math.max(\n        0,\n        Math.min(\n          scrollTop + blockScroll / scaleY,\n          frame.scrollHeight - height / scaleY + scrollbarHeight\n        )\n      )\n      inlineScroll = Math.max(\n        0,\n        Math.min(\n          scrollLeft + inlineScroll / scaleX,\n          frame.scrollWidth - width / scaleX + scrollbarWidth\n        )\n      )\n\n      // Cache the offset so that parent frames can scroll this into view correctly\n      targetBlock += scrollTop - blockScroll\n      targetInline += scrollLeft - inlineScroll\n    }\n\n    computations.push({ el: frame, top: blockScroll, left: inlineScroll })\n  }\n\n  return computations\n}\n"]},"metadata":{},"sourceType":"module"}