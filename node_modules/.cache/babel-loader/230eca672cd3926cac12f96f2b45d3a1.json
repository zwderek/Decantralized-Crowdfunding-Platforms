{"ast":null,"code":"import { render } from \"rc-util/es/React/render\";\nimport * as React from 'react';\nimport ConfigProvider, { globalConfig } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useNotification, { useInternalNotification } from './useNotification';\nlet notification = null;\n\nlet act = callback => callback();\n\nlet taskQueue = [];\nlet defaultGlobalConfig = {};\n\nfunction getGlobalContext() {\n  const {\n    prefixCls: globalPrefixCls,\n    getContainer: globalGetContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  } = defaultGlobalConfig;\n  const mergedPrefixCls = globalPrefixCls !== null && globalPrefixCls !== void 0 ? globalPrefixCls : globalConfig().getPrefixCls('notification');\n  const mergedContainer = (globalGetContainer === null || globalGetContainer === void 0 ? void 0 : globalGetContainer()) || document.body;\n  return {\n    prefixCls: mergedPrefixCls,\n    container: mergedContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  };\n}\n\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((_, ref) => {\n  const [prefixCls, setPrefixCls] = React.useState();\n  const [container, setContainer] = React.useState();\n  const [maxCount, setMaxCount] = React.useState();\n  const [rtl, setRTL] = React.useState();\n  const [top, setTop] = React.useState();\n  const [bottom, setBottom] = React.useState();\n  const [api, holder] = useInternalNotification({\n    prefixCls,\n    getContainer: () => container,\n    maxCount,\n    rtl,\n    top,\n    bottom\n  });\n  const global = globalConfig();\n  const rootPrefixCls = global.getRootPrefixCls();\n  const rootIconPrefixCls = global.getIconPrefixCls();\n\n  const sync = () => {\n    const {\n      prefixCls: nextGlobalPrefixCls,\n      container: nextGlobalContainer,\n      maxCount: nextGlobalMaxCount,\n      rtl: nextGlobalRTL,\n      top: nextTop,\n      bottom: nextBottom\n    } = getGlobalContext();\n    setPrefixCls(nextGlobalPrefixCls);\n    setContainer(nextGlobalContainer);\n    setMaxCount(nextGlobalMaxCount);\n    setRTL(nextGlobalRTL);\n    setTop(nextTop);\n    setBottom(nextBottom);\n  };\n\n  React.useEffect(sync, []);\n  React.useImperativeHandle(ref, () => {\n    const instance = Object.assign({}, api);\n    Object.keys(instance).forEach(method => {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance,\n      sync\n    };\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls\n  }, holder);\n});\n\nfunction flushNotice() {\n  if (!notification) {\n    const holderFragment = document.createDocumentFragment();\n    const newNotification = {\n      fragment: holderFragment\n    };\n    notification = newNotification; // Delay render to avoid sync issue\n\n    act(() => {\n      render( /*#__PURE__*/React.createElement(GlobalHolder, {\n        ref: node => {\n          const {\n            instance,\n            sync\n          } = node || {};\n          Promise.resolve().then(() => {\n            if (!newNotification.instance && instance) {\n              newNotification.instance = instance;\n              newNotification.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  } // Notification not ready\n\n\n  if (!notification.instance) {\n    return;\n  } // >>> Execute task\n\n\n  taskQueue.forEach(task => {\n    // eslint-disable-next-line default-case\n    switch (task.type) {\n      case 'open':\n        {\n          act(() => {\n            notification.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n          });\n          break;\n        }\n\n      case 'destroy':\n        act(() => {\n          notification === null || notification === void 0 ? void 0 : notification.instance.destroy(task.key);\n        });\n        break;\n    }\n  }); // Clean up\n\n  taskQueue = [];\n} // ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\n\n\nconst methods = ['success', 'info', 'warning', 'error'];\n\nfunction setNotificationGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config); // Trigger sync for it\n\n  act(() => {\n    var _a;\n\n    (_a = notification === null || notification === void 0 ? void 0 : notification.sync) === null || _a === void 0 ? void 0 : _a.call(notification);\n  });\n}\n\nfunction open(config) {\n  taskQueue.push({\n    type: 'open',\n    config\n  });\n  flushNotice();\n}\n\nfunction destroy(key) {\n  taskQueue.push({\n    type: 'destroy',\n    key\n  });\n  flushNotice();\n}\n\nconst baseStaticMethods = {\n  open,\n  destroy,\n  config: setNotificationGlobalConfig,\n  useNotification,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nconst staticMethods = baseStaticMethods;\nmethods.forEach(type => {\n  staticMethods[type] = config => open(Object.assign(Object.assign({}, config), {\n    type\n  }));\n}); // ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\n\nconst noop = () => {};\n/** @private Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\n\n\nexport let actWrapper = noop;\n\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = wrapper => {\n    act = wrapper;\n  };\n}\n\nexport default staticMethods;","map":{"version":3,"names":["render","React","ConfigProvider","globalConfig","PurePanel","useNotification","useInternalNotification","notification","act","callback","taskQueue","defaultGlobalConfig","getGlobalContext","prefixCls","globalPrefixCls","getContainer","globalGetContainer","rtl","maxCount","top","bottom","mergedPrefixCls","getPrefixCls","mergedContainer","document","body","container","GlobalHolder","forwardRef","_","ref","setPrefixCls","useState","setContainer","setMaxCount","setRTL","setTop","setBottom","api","holder","global","rootPrefixCls","getRootPrefixCls","rootIconPrefixCls","getIconPrefixCls","sync","nextGlobalPrefixCls","nextGlobalContainer","nextGlobalMaxCount","nextGlobalRTL","nextTop","nextBottom","useEffect","useImperativeHandle","instance","Object","assign","keys","forEach","method","apply","arguments","createElement","iconPrefixCls","flushNotice","holderFragment","createDocumentFragment","newNotification","fragment","node","Promise","resolve","then","task","type","open","config","destroy","key","methods","setNotificationGlobalConfig","_a","call","push","baseStaticMethods","_InternalPanelDoNotUseOrYouWillBeFired","staticMethods","noop","actWrapper","process","env","NODE_ENV","wrapper"],"sources":["D:/year4sem2/evmos/campaign/node_modules/antd/es/notification/index.js"],"sourcesContent":["import { render } from \"rc-util/es/React/render\";\nimport * as React from 'react';\nimport ConfigProvider, { globalConfig } from '../config-provider';\nimport PurePanel from './PurePanel';\nimport useNotification, { useInternalNotification } from './useNotification';\nlet notification = null;\nlet act = callback => callback();\nlet taskQueue = [];\nlet defaultGlobalConfig = {};\nfunction getGlobalContext() {\n  const {\n    prefixCls: globalPrefixCls,\n    getContainer: globalGetContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  } = defaultGlobalConfig;\n  const mergedPrefixCls = globalPrefixCls !== null && globalPrefixCls !== void 0 ? globalPrefixCls : globalConfig().getPrefixCls('notification');\n  const mergedContainer = (globalGetContainer === null || globalGetContainer === void 0 ? void 0 : globalGetContainer()) || document.body;\n  return {\n    prefixCls: mergedPrefixCls,\n    container: mergedContainer,\n    rtl,\n    maxCount,\n    top,\n    bottom\n  };\n}\nconst GlobalHolder = /*#__PURE__*/React.forwardRef((_, ref) => {\n  const [prefixCls, setPrefixCls] = React.useState();\n  const [container, setContainer] = React.useState();\n  const [maxCount, setMaxCount] = React.useState();\n  const [rtl, setRTL] = React.useState();\n  const [top, setTop] = React.useState();\n  const [bottom, setBottom] = React.useState();\n  const [api, holder] = useInternalNotification({\n    prefixCls,\n    getContainer: () => container,\n    maxCount,\n    rtl,\n    top,\n    bottom\n  });\n  const global = globalConfig();\n  const rootPrefixCls = global.getRootPrefixCls();\n  const rootIconPrefixCls = global.getIconPrefixCls();\n  const sync = () => {\n    const {\n      prefixCls: nextGlobalPrefixCls,\n      container: nextGlobalContainer,\n      maxCount: nextGlobalMaxCount,\n      rtl: nextGlobalRTL,\n      top: nextTop,\n      bottom: nextBottom\n    } = getGlobalContext();\n    setPrefixCls(nextGlobalPrefixCls);\n    setContainer(nextGlobalContainer);\n    setMaxCount(nextGlobalMaxCount);\n    setRTL(nextGlobalRTL);\n    setTop(nextTop);\n    setBottom(nextBottom);\n  };\n  React.useEffect(sync, []);\n  React.useImperativeHandle(ref, () => {\n    const instance = Object.assign({}, api);\n    Object.keys(instance).forEach(method => {\n      instance[method] = function () {\n        sync();\n        return api[method].apply(api, arguments);\n      };\n    });\n    return {\n      instance,\n      sync\n    };\n  });\n  return /*#__PURE__*/React.createElement(ConfigProvider, {\n    prefixCls: rootPrefixCls,\n    iconPrefixCls: rootIconPrefixCls\n  }, holder);\n});\nfunction flushNotice() {\n  if (!notification) {\n    const holderFragment = document.createDocumentFragment();\n    const newNotification = {\n      fragment: holderFragment\n    };\n    notification = newNotification;\n    // Delay render to avoid sync issue\n    act(() => {\n      render( /*#__PURE__*/React.createElement(GlobalHolder, {\n        ref: node => {\n          const {\n            instance,\n            sync\n          } = node || {};\n          Promise.resolve().then(() => {\n            if (!newNotification.instance && instance) {\n              newNotification.instance = instance;\n              newNotification.sync = sync;\n              flushNotice();\n            }\n          });\n        }\n      }), holderFragment);\n    });\n    return;\n  }\n  // Notification not ready\n  if (!notification.instance) {\n    return;\n  }\n  // >>> Execute task\n  taskQueue.forEach(task => {\n    // eslint-disable-next-line default-case\n    switch (task.type) {\n      case 'open':\n        {\n          act(() => {\n            notification.instance.open(Object.assign(Object.assign({}, defaultGlobalConfig), task.config));\n          });\n          break;\n        }\n      case 'destroy':\n        act(() => {\n          notification === null || notification === void 0 ? void 0 : notification.instance.destroy(task.key);\n        });\n        break;\n    }\n  });\n  // Clean up\n  taskQueue = [];\n}\n// ==============================================================================\n// ==                                  Export                                  ==\n// ==============================================================================\nconst methods = ['success', 'info', 'warning', 'error'];\nfunction setNotificationGlobalConfig(config) {\n  defaultGlobalConfig = Object.assign(Object.assign({}, defaultGlobalConfig), config);\n  // Trigger sync for it\n  act(() => {\n    var _a;\n    (_a = notification === null || notification === void 0 ? void 0 : notification.sync) === null || _a === void 0 ? void 0 : _a.call(notification);\n  });\n}\nfunction open(config) {\n  taskQueue.push({\n    type: 'open',\n    config\n  });\n  flushNotice();\n}\nfunction destroy(key) {\n  taskQueue.push({\n    type: 'destroy',\n    key\n  });\n  flushNotice();\n}\nconst baseStaticMethods = {\n  open,\n  destroy,\n  config: setNotificationGlobalConfig,\n  useNotification,\n  _InternalPanelDoNotUseOrYouWillBeFired: PurePanel\n};\nconst staticMethods = baseStaticMethods;\nmethods.forEach(type => {\n  staticMethods[type] = config => open(Object.assign(Object.assign({}, config), {\n    type\n  }));\n});\n// ==============================================================================\n// ==                                   Test                                   ==\n// ==============================================================================\nconst noop = () => {};\n/** @private Only Work in test env */\n// eslint-disable-next-line import/no-mutable-exports\nexport let actWrapper = noop;\nif (process.env.NODE_ENV === 'test') {\n  actWrapper = wrapper => {\n    act = wrapper;\n  };\n}\nexport default staticMethods;"],"mappings":"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"},"metadata":{},"sourceType":"module"}