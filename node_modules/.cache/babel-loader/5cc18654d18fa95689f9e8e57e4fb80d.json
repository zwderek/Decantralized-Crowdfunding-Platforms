{"ast":null,"code":"import * as React from 'react';\nimport useForceUpdate from '../_util/hooks/useForceUpdate';\nimport { cloneElement } from '../_util/reactNode';\nimport Statistic from './Statistic';\nimport { formatCountdown } from './utils';\nconst REFRESH_INTERVAL = 1000 / 30;\n\nfunction getTime(value) {\n  return new Date(value).getTime();\n}\n\nconst Countdown = props => {\n  const {\n    value,\n    format = 'HH:mm:ss',\n    onChange,\n    onFinish\n  } = props;\n  const forceUpdate = useForceUpdate();\n  const countdown = React.useRef(null);\n\n  const stopTimer = () => {\n    onFinish === null || onFinish === void 0 ? void 0 : onFinish();\n\n    if (countdown.current) {\n      clearInterval(countdown.current);\n      countdown.current = null;\n    }\n  };\n\n  const syncTimer = () => {\n    const timestamp = getTime(value);\n\n    if (timestamp >= Date.now()) {\n      countdown.current = setInterval(() => {\n        forceUpdate();\n        onChange === null || onChange === void 0 ? void 0 : onChange(timestamp - Date.now());\n\n        if (timestamp < Date.now()) {\n          stopTimer();\n        }\n      }, REFRESH_INTERVAL);\n    }\n  };\n\n  React.useEffect(() => {\n    syncTimer();\n    return () => {\n      if (countdown.current) {\n        clearInterval(countdown.current);\n        countdown.current = null;\n      }\n    };\n  }, [value]);\n\n  const formatter = (formatValue, config) => formatCountdown(formatValue, Object.assign(Object.assign({}, config), {\n    format\n  }));\n\n  const valueRender = node => cloneElement(node, {\n    title: undefined\n  });\n\n  return /*#__PURE__*/React.createElement(Statistic, Object.assign({}, props, {\n    valueRender: valueRender,\n    formatter: formatter\n  }));\n};\n\nexport default /*#__PURE__*/React.memo(Countdown);","map":{"version":3,"names":["React","useForceUpdate","cloneElement","Statistic","formatCountdown","REFRESH_INTERVAL","getTime","value","Date","Countdown","props","format","onChange","onFinish","forceUpdate","countdown","useRef","stopTimer","current","clearInterval","syncTimer","timestamp","now","setInterval","useEffect","formatter","formatValue","config","Object","assign","valueRender","node","title","undefined","createElement","memo"],"sources":["D:/year4sem2/evmos/campaign/node_modules/antd/es/statistic/Countdown.js"],"sourcesContent":["import * as React from 'react';\nimport useForceUpdate from '../_util/hooks/useForceUpdate';\nimport { cloneElement } from '../_util/reactNode';\nimport Statistic from './Statistic';\nimport { formatCountdown } from './utils';\nconst REFRESH_INTERVAL = 1000 / 30;\nfunction getTime(value) {\n  return new Date(value).getTime();\n}\nconst Countdown = props => {\n  const {\n    value,\n    format = 'HH:mm:ss',\n    onChange,\n    onFinish\n  } = props;\n  const forceUpdate = useForceUpdate();\n  const countdown = React.useRef(null);\n  const stopTimer = () => {\n    onFinish === null || onFinish === void 0 ? void 0 : onFinish();\n    if (countdown.current) {\n      clearInterval(countdown.current);\n      countdown.current = null;\n    }\n  };\n  const syncTimer = () => {\n    const timestamp = getTime(value);\n    if (timestamp >= Date.now()) {\n      countdown.current = setInterval(() => {\n        forceUpdate();\n        onChange === null || onChange === void 0 ? void 0 : onChange(timestamp - Date.now());\n        if (timestamp < Date.now()) {\n          stopTimer();\n        }\n      }, REFRESH_INTERVAL);\n    }\n  };\n  React.useEffect(() => {\n    syncTimer();\n    return () => {\n      if (countdown.current) {\n        clearInterval(countdown.current);\n        countdown.current = null;\n      }\n    };\n  }, [value]);\n  const formatter = (formatValue, config) => formatCountdown(formatValue, Object.assign(Object.assign({}, config), {\n    format\n  }));\n  const valueRender = node => cloneElement(node, {\n    title: undefined\n  });\n  return /*#__PURE__*/React.createElement(Statistic, Object.assign({}, props, {\n    valueRender: valueRender,\n    formatter: formatter\n  }));\n};\nexport default /*#__PURE__*/React.memo(Countdown);"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,SAASC,eAAT,QAAgC,SAAhC;AACA,MAAMC,gBAAgB,GAAG,OAAO,EAAhC;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;EACtB,OAAO,IAAIC,IAAJ,CAASD,KAAT,EAAgBD,OAAhB,EAAP;AACD;;AACD,MAAMG,SAAS,GAAGC,KAAK,IAAI;EACzB,MAAM;IACJH,KADI;IAEJI,MAAM,GAAG,UAFL;IAGJC,QAHI;IAIJC;EAJI,IAKFH,KALJ;EAMA,MAAMI,WAAW,GAAGb,cAAc,EAAlC;EACA,MAAMc,SAAS,GAAGf,KAAK,CAACgB,MAAN,CAAa,IAAb,CAAlB;;EACA,MAAMC,SAAS,GAAG,MAAM;IACtBJ,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,EAA5D;;IACA,IAAIE,SAAS,CAACG,OAAd,EAAuB;MACrBC,aAAa,CAACJ,SAAS,CAACG,OAAX,CAAb;MACAH,SAAS,CAACG,OAAV,GAAoB,IAApB;IACD;EACF,CAND;;EAOA,MAAME,SAAS,GAAG,MAAM;IACtB,MAAMC,SAAS,GAAGf,OAAO,CAACC,KAAD,CAAzB;;IACA,IAAIc,SAAS,IAAIb,IAAI,CAACc,GAAL,EAAjB,EAA6B;MAC3BP,SAAS,CAACG,OAAV,GAAoBK,WAAW,CAAC,MAAM;QACpCT,WAAW;QACXF,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,KAAK,CAAvC,GAA2C,KAAK,CAAhD,GAAoDA,QAAQ,CAACS,SAAS,GAAGb,IAAI,CAACc,GAAL,EAAb,CAA5D;;QACA,IAAID,SAAS,GAAGb,IAAI,CAACc,GAAL,EAAhB,EAA4B;UAC1BL,SAAS;QACV;MACF,CAN8B,EAM5BZ,gBAN4B,CAA/B;IAOD;EACF,CAXD;;EAYAL,KAAK,CAACwB,SAAN,CAAgB,MAAM;IACpBJ,SAAS;IACT,OAAO,MAAM;MACX,IAAIL,SAAS,CAACG,OAAd,EAAuB;QACrBC,aAAa,CAACJ,SAAS,CAACG,OAAX,CAAb;QACAH,SAAS,CAACG,OAAV,GAAoB,IAApB;MACD;IACF,CALD;EAMD,CARD,EAQG,CAACX,KAAD,CARH;;EASA,MAAMkB,SAAS,GAAG,CAACC,WAAD,EAAcC,MAAd,KAAyBvB,eAAe,CAACsB,WAAD,EAAcE,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,MAAlB,CAAd,EAAyC;IAC/GhB;EAD+G,CAAzC,CAAd,CAA1D;;EAGA,MAAMmB,WAAW,GAAGC,IAAI,IAAI7B,YAAY,CAAC6B,IAAD,EAAO;IAC7CC,KAAK,EAAEC;EADsC,CAAP,CAAxC;;EAGA,OAAO,aAAajC,KAAK,CAACkC,aAAN,CAAoB/B,SAApB,EAA+ByB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBnB,KAAlB,EAAyB;IAC1EoB,WAAW,EAAEA,WAD6D;IAE1EL,SAAS,EAAEA;EAF+D,CAAzB,CAA/B,CAApB;AAID,CA/CD;;AAgDA,eAAe,aAAazB,KAAK,CAACmC,IAAN,CAAW1B,SAAX,CAA5B"},"metadata":{},"sourceType":"module"}