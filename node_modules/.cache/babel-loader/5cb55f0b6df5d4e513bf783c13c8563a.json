{"ast":null,"code":"import { presetPrimaryColors } from '@ant-design/colors';\nimport warning from '../_util/warning';\nexport function validProgress(progress) {\n  if (!progress || progress < 0) {\n    return 0;\n  }\n\n  if (progress > 100) {\n    return 100;\n  }\n\n  return progress;\n}\nexport function getSuccessPercent(_ref) {\n  let {\n    success,\n    successPercent\n  } = _ref;\n  let percent = successPercent;\n  /** @deprecated Use `percent` instead */\n\n  if (success && 'progress' in success) {\n    process.env.NODE_ENV !== \"production\" ? warning(false, 'Progress', '`success.progress` is deprecated. Please use `success.percent` instead.') : void 0;\n    percent = success.progress;\n  }\n\n  if (success && 'percent' in success) {\n    percent = success.percent;\n  }\n\n  return percent;\n}\nexport const getPercentage = _ref2 => {\n  let {\n    percent,\n    success,\n    successPercent\n  } = _ref2;\n  const realSuccessPercent = validProgress(getSuccessPercent({\n    success,\n    successPercent\n  }));\n  return [realSuccessPercent, validProgress(validProgress(percent) - realSuccessPercent)];\n};\nexport const getStrokeColor = _ref3 => {\n  let {\n    success = {},\n    strokeColor\n  } = _ref3;\n  const {\n    strokeColor: successColor\n  } = success;\n  return [successColor || presetPrimaryColors.green, strokeColor || null];\n};","map":{"version":3,"names":["presetPrimaryColors","warning","validProgress","progress","getSuccessPercent","_ref","success","successPercent","percent","process","env","NODE_ENV","getPercentage","_ref2","realSuccessPercent","getStrokeColor","_ref3","strokeColor","successColor","green"],"sources":["D:/year4sem2/evmos/campaign/node_modules/antd/es/progress/utils.js"],"sourcesContent":["import { presetPrimaryColors } from '@ant-design/colors';\nimport warning from '../_util/warning';\nexport function validProgress(progress) {\n  if (!progress || progress < 0) {\n    return 0;\n  }\n  if (progress > 100) {\n    return 100;\n  }\n  return progress;\n}\nexport function getSuccessPercent(_ref) {\n  let {\n    success,\n    successPercent\n  } = _ref;\n  let percent = successPercent;\n  /** @deprecated Use `percent` instead */\n  if (success && 'progress' in success) {\n    process.env.NODE_ENV !== \"production\" ? warning(false, 'Progress', '`success.progress` is deprecated. Please use `success.percent` instead.') : void 0;\n    percent = success.progress;\n  }\n  if (success && 'percent' in success) {\n    percent = success.percent;\n  }\n  return percent;\n}\nexport const getPercentage = _ref2 => {\n  let {\n    percent,\n    success,\n    successPercent\n  } = _ref2;\n  const realSuccessPercent = validProgress(getSuccessPercent({\n    success,\n    successPercent\n  }));\n  return [realSuccessPercent, validProgress(validProgress(percent) - realSuccessPercent)];\n};\nexport const getStrokeColor = _ref3 => {\n  let {\n    success = {},\n    strokeColor\n  } = _ref3;\n  const {\n    strokeColor: successColor\n  } = success;\n  return [successColor || presetPrimaryColors.green, strokeColor || null];\n};"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,oBAApC;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAO,SAASC,aAAT,CAAuBC,QAAvB,EAAiC;EACtC,IAAI,CAACA,QAAD,IAAaA,QAAQ,GAAG,CAA5B,EAA+B;IAC7B,OAAO,CAAP;EACD;;EACD,IAAIA,QAAQ,GAAG,GAAf,EAAoB;IAClB,OAAO,GAAP;EACD;;EACD,OAAOA,QAAP;AACD;AACD,OAAO,SAASC,iBAAT,CAA2BC,IAA3B,EAAiC;EACtC,IAAI;IACFC,OADE;IAEFC;EAFE,IAGAF,IAHJ;EAIA,IAAIG,OAAO,GAAGD,cAAd;EACA;;EACA,IAAID,OAAO,IAAI,cAAcA,OAA7B,EAAsC;IACpCG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCV,OAAO,CAAC,KAAD,EAAQ,UAAR,EAAoB,yEAApB,CAA/C,GAAgJ,KAAK,CAArJ;IACAO,OAAO,GAAGF,OAAO,CAACH,QAAlB;EACD;;EACD,IAAIG,OAAO,IAAI,aAAaA,OAA5B,EAAqC;IACnCE,OAAO,GAAGF,OAAO,CAACE,OAAlB;EACD;;EACD,OAAOA,OAAP;AACD;AACD,OAAO,MAAMI,aAAa,GAAGC,KAAK,IAAI;EACpC,IAAI;IACFL,OADE;IAEFF,OAFE;IAGFC;EAHE,IAIAM,KAJJ;EAKA,MAAMC,kBAAkB,GAAGZ,aAAa,CAACE,iBAAiB,CAAC;IACzDE,OADyD;IAEzDC;EAFyD,CAAD,CAAlB,CAAxC;EAIA,OAAO,CAACO,kBAAD,EAAqBZ,aAAa,CAACA,aAAa,CAACM,OAAD,CAAb,GAAyBM,kBAA1B,CAAlC,CAAP;AACD,CAXM;AAYP,OAAO,MAAMC,cAAc,GAAGC,KAAK,IAAI;EACrC,IAAI;IACFV,OAAO,GAAG,EADR;IAEFW;EAFE,IAGAD,KAHJ;EAIA,MAAM;IACJC,WAAW,EAAEC;EADT,IAEFZ,OAFJ;EAGA,OAAO,CAACY,YAAY,IAAIlB,mBAAmB,CAACmB,KAArC,EAA4CF,WAAW,IAAI,IAA3D,CAAP;AACD,CATM"},"metadata":{},"sourceType":"module"}