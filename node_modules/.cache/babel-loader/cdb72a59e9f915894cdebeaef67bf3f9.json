{"ast":null,"code":"/**\n * TODO: 4.0\n *\n * - Remove `dataSource`\n * - `size` not work with customizeInput\n * - CustomizeInput not feedback `ENTER` key since accessibility enhancement\n */\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport Select from '../select';\nimport genPurePanel from '../_util/PurePanel';\nimport { isValidElement } from '../_util/reactNode';\nimport warning from '../_util/warning';\nconst {\n  Option\n} = Select;\n\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\n\nconst AutoComplete = (props, ref) => {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    popupClassName,\n    dropdownClassName,\n    children,\n    dataSource\n  } = props;\n  const childNodes = toArray(children); // ============================= Input =============================\n\n  let customizeInput;\n\n  if (childNodes.length === 1 && isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    [customizeInput] = childNodes;\n  }\n\n  const getInputElement = customizeInput ? () => customizeInput : undefined; // ============================ Options ============================\n\n  let optionChildren; // [Legacy] convert `children` or `dataSource` into option children\n\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    optionChildren = children;\n  } else {\n    optionChildren = dataSource ? dataSource.map(item => {\n      if (isValidElement(item)) {\n        return item;\n      }\n\n      switch (typeof item) {\n        case 'string':\n          return /*#__PURE__*/React.createElement(Option, {\n            key: item,\n            value: item\n          }, item);\n\n        case 'object':\n          {\n            const {\n              value: optionValue\n            } = item;\n            return /*#__PURE__*/React.createElement(Option, {\n              key: optionValue,\n              value: optionValue\n            }, item.text);\n          }\n\n        default:\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'AutoComplete', '`dataSource` is only supports type `string[] | Object[]`.') : void 0;\n          return undefined;\n      }\n    }) : [];\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== \"production\" ? warning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!dropdownClassName, 'AutoComplete', '`dropdownClassName` is deprecated, please use `popupClassName` instead.') : void 0;\n  }\n\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('select', customizePrefixCls);\n  return /*#__PURE__*/React.createElement(Select, Object.assign({\n    ref: ref\n  }, omit(props, ['dataSource', 'dropdownClassName']), {\n    prefixCls: prefixCls,\n    popupClassName: popupClassName || dropdownClassName,\n    className: classNames(`${prefixCls}-auto-complete`, className),\n    mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE\n  }, {\n    // Internal api\n    getInputElement\n  }), optionChildren);\n};\n\nconst RefAutoComplete = /*#__PURE__*/React.forwardRef(AutoComplete); // We don't care debug panel\n\n/* istanbul ignore next */\n\nconst PurePanel = genPurePanel(RefAutoComplete);\nRefAutoComplete.Option = Option;\nRefAutoComplete._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\n\nif (process.env.NODE_ENV !== 'production') {\n  AutoComplete.displayName = 'AutoComplete';\n}\n\nexport default RefAutoComplete;","map":{"version":3,"names":["classNames","toArray","omit","React","ConfigContext","Select","genPurePanel","isValidElement","warning","Option","isSelectOptionOrSelectOptGroup","child","type","isSelectOption","isSelectOptGroup","AutoComplete","props","ref","prefixCls","customizePrefixCls","className","popupClassName","dropdownClassName","children","dataSource","childNodes","customizeInput","length","getInputElement","undefined","optionChildren","map","item","createElement","key","value","optionValue","text","process","env","NODE_ENV","getPrefixCls","useContext","Object","assign","mode","SECRET_COMBOBOX_MODE_DO_NOT_USE","RefAutoComplete","forwardRef","PurePanel","_InternalPanelDoNotUseOrYouWillBeFired","displayName"],"sources":["D:/year4sem2/evmos/campaign/node_modules/antd/es/auto-complete/index.js"],"sourcesContent":["/**\n * TODO: 4.0\n *\n * - Remove `dataSource`\n * - `size` not work with customizeInput\n * - CustomizeInput not feedback `ENTER` key since accessibility enhancement\n */\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { ConfigContext } from '../config-provider';\nimport Select from '../select';\nimport genPurePanel from '../_util/PurePanel';\nimport { isValidElement } from '../_util/reactNode';\nimport warning from '../_util/warning';\nconst {\n  Option\n} = Select;\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\nconst AutoComplete = (props, ref) => {\n  const {\n    prefixCls: customizePrefixCls,\n    className,\n    popupClassName,\n    dropdownClassName,\n    children,\n    dataSource\n  } = props;\n  const childNodes = toArray(children);\n  // ============================= Input =============================\n  let customizeInput;\n  if (childNodes.length === 1 && isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    [customizeInput] = childNodes;\n  }\n  const getInputElement = customizeInput ? () => customizeInput : undefined;\n  // ============================ Options ============================\n  let optionChildren;\n  // [Legacy] convert `children` or `dataSource` into option children\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    optionChildren = children;\n  } else {\n    optionChildren = dataSource ? dataSource.map(item => {\n      if (isValidElement(item)) {\n        return item;\n      }\n      switch (typeof item) {\n        case 'string':\n          return /*#__PURE__*/React.createElement(Option, {\n            key: item,\n            value: item\n          }, item);\n        case 'object':\n          {\n            const {\n              value: optionValue\n            } = item;\n            return /*#__PURE__*/React.createElement(Option, {\n              key: optionValue,\n              value: optionValue\n            }, item.text);\n          }\n        default:\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'AutoComplete', '`dataSource` is only supports type `string[] | Object[]`.') : void 0;\n          return undefined;\n      }\n    }) : [];\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    process.env.NODE_ENV !== \"production\" ? warning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.') : void 0;\n    process.env.NODE_ENV !== \"production\" ? warning(!dropdownClassName, 'AutoComplete', '`dropdownClassName` is deprecated, please use `popupClassName` instead.') : void 0;\n  }\n  const {\n    getPrefixCls\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('select', customizePrefixCls);\n  return /*#__PURE__*/React.createElement(Select, Object.assign({\n    ref: ref\n  }, omit(props, ['dataSource', 'dropdownClassName']), {\n    prefixCls: prefixCls,\n    popupClassName: popupClassName || dropdownClassName,\n    className: classNames(`${prefixCls}-auto-complete`, className),\n    mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE\n  }, {\n    // Internal api\n    getInputElement\n  }), optionChildren);\n};\nconst RefAutoComplete = /*#__PURE__*/React.forwardRef(AutoComplete);\n// We don't care debug panel\n/* istanbul ignore next */\nconst PurePanel = genPurePanel(RefAutoComplete);\nRefAutoComplete.Option = Option;\nRefAutoComplete._InternalPanelDoNotUseOrYouWillBeFired = PurePanel;\nif (process.env.NODE_ENV !== 'production') {\n  AutoComplete.displayName = 'AutoComplete';\n}\nexport default RefAutoComplete;"],"mappings":"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"},"metadata":{},"sourceType":"module"}