{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n  }\n  return a;\n};\n\nvar __objRest = (source, exclude) => {\n  var target = {};\n\n  for (var prop in source) if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n\n  if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)) {\n    if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n  }\n  return target;\n}; // src/index.tsx\n\n\nimport React, { useRef, useEffect, useState } from \"react\"; // src/third-party/qrcodegen/index.ts\n\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\n\nvar qrcodegen;\n\n(qrcodegen2 => {\n  const _QrCode = class {\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      this.modules = [];\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION) throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7) throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      let row = [];\n\n      for (let i = 0; i < this.size; i++) row.push(false);\n\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n\n      if (msk == -1) {\n        let minPenalty = 1e9;\n\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n\n          this.applyMask(i);\n        }\n      }\n\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n\n    static encodeText(text, ecl) {\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\n      return _QrCode.encodeSegments(segs, ecl);\n    }\n\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\n      return _QrCode.encodeSegments([seg], ecl);\n    }\n\n    static encodeSegments(segs, ecl) {\n      let minVersion = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      let maxVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 40;\n      let mask = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;\n      let boostEcl = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7) throw new RangeError(\"Invalid value\");\n      let version;\n      let dataUsedBits;\n\n      for (version = minVersion;; version++) {\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        const usedBits = QrSegment.getTotalBits(segs, version);\n\n        if (usedBits <= dataCapacityBits2) {\n          dataUsedBits = usedBits;\n          break;\n        }\n\n        if (version >= maxVersion) throw new RangeError(\"Data too long\");\n      }\n\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8) ecl = newEcl;\n      }\n\n      let bb = [];\n\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n\n        for (const b of seg.getData()) bb.push(b);\n      }\n\n      assert(bb.length == dataUsedBits);\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17) appendBits(padByte, 8, bb);\n\n      let dataCodewords = [];\n\n      while (dataCodewords.length * 8 < bb.length) dataCodewords.push(0);\n\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      return new _QrCode(version, ecl, dataCodewords, mask);\n    }\n\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n\n    getModules() {\n      return this.modules;\n    }\n\n    drawFunctionPatterns() {\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0)) this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n\n      this.drawFormatBits(0);\n      this.drawVersion();\n    }\n\n    drawFormatBits(mask) {\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\n      let rem = data;\n\n      for (let i = 0; i < 10; i++) rem = rem << 1 ^ (rem >>> 9) * 1335;\n\n      const bits = (data << 10 | rem) ^ 21522;\n      assert(bits >>> 15 == 0);\n\n      for (let i = 0; i <= 5; i++) this.setFunctionModule(8, i, getBit(bits, i));\n\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n\n      for (let i = 9; i < 15; i++) this.setFunctionModule(14 - i, 8, getBit(bits, i));\n\n      for (let i = 0; i < 8; i++) this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n\n      for (let i = 8; i < 15; i++) this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n\n      this.setFunctionModule(8, this.size - 8, true);\n    }\n\n    drawVersion() {\n      if (this.version < 7) return;\n      let rem = this.version;\n\n      for (let i = 0; i < 12; i++) rem = rem << 1 ^ (rem >>> 11) * 7973;\n\n      const bits = this.version << 12 | rem;\n      assert(bits >>> 18 == 0);\n\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size) this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++) this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl)) throw new RangeError(\"Invalid argument\");\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      let blocks = [];\n\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n\n        if (i < numShortBlocks) dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n\n      let result = [];\n\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks) result.push(block[i]);\n        });\n      }\n\n      assert(result.length == rawCodewords);\n      return result;\n    }\n\n    drawCodewords(data) {\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8)) throw new RangeError(\"Invalid argument\");\n      let i = 0;\n\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        if (right == 6) right = 5;\n\n        for (let vert = 0; vert < this.size; vert++) {\n          for (let j = 0; j < 2; j++) {\n            const x = right - j;\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert;\n\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n          }\n        }\n      }\n\n      assert(i == data.length * 8);\n    }\n\n    applyMask(mask) {\n      if (mask < 0 || mask > 7) throw new RangeError(\"Mask value out of range\");\n\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n\n            case 1:\n              invert = y % 2 == 0;\n              break;\n\n            case 2:\n              invert = x % 3 == 0;\n              break;\n\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n\n            default:\n              throw new Error(\"Unreachable\");\n          }\n\n          if (!this.isFunction[y][x] && invert) this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n\n    getPenaltyScore() {\n      let result = 0;\n\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5) result += _QrCode.PENALTY_N1;else if (runX > 5) result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n      }\n\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5) result += _QrCode.PENALTY_N1;else if (runY > 5) result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor) result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\n      }\n\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1]) result += _QrCode.PENALTY_N2;\n        }\n      }\n\n      let dark = 0;\n\n      for (const row of this.modules) dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n\n      const total = this.size * this.size;\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * _QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888);\n      return result;\n    }\n\n    getAlignmentPatternPositions() {\n      if (this.version == 1) return [];else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        let result = [6];\n\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step) result.splice(1, 0, pos);\n\n        return result;\n      }\n    }\n\n    static getNumRawDataModules(ver) {\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION) throw new RangeError(\"Version number out of range\");\n      let result = (16 * ver + 128) * ver + 64;\n\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7) result -= 36;\n      }\n\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255) throw new RangeError(\"Degree out of range\");\n      let result = [];\n\n      for (let i = 0; i < degree - 1; i++) result.push(0);\n\n      result.push(1);\n      let root = 1;\n\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < result.length; j++) {\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length) result[j] ^= result[j + 1];\n        }\n\n        root = _QrCode.reedSolomonMultiply(root, 2);\n      }\n\n      return result;\n    }\n\n    static reedSolomonComputeRemainder(data, divisor) {\n      let result = divisor.map(_ => 0);\n\n      for (const b of data) {\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\n      }\n\n      return result;\n    }\n\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0) throw new RangeError(\"Byte out of range\");\n      let z = 0;\n\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n      }\n\n      assert(z >>> 8 == 0);\n      return z;\n    }\n\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n\n      currentRunLength += this.size;\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0) currentRunLength += this.size;\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n\n  };\n\n  let QrCode = _QrCode;\n  QrCode.MIN_VERSION = 1;\n  QrCode.MAX_VERSION = 40;\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [[-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28], [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30], [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]];\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [[-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25], [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49], [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68], [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]];\n  qrcodegen2.QrCode = QrCode;\n\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0) throw new RangeError(\"Value out of range\");\n\n    for (let i = len - 1; i >= 0; i--) bb.push(val >>> i & 1);\n  }\n\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n\n  function assert(cond) {\n    if (!cond) throw new Error(\"Assertion error\");\n  }\n\n  const _QrSegment = class {\n    constructor(mode, numChars, bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0) throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n\n    static makeBytes(data) {\n      let bb = [];\n\n      for (const b of data) appendBits(b, 8, bb);\n\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n    }\n\n    static makeNumeric(digits) {\n      if (!_QrSegment.isNumeric(digits)) throw new RangeError(\"String contains non-numeric characters\");\n      let bb = [];\n\n      for (let i = 0; i < digits.length;) {\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substr(i, n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n\n    static makeAlphanumeric(text) {\n      if (!_QrSegment.isAlphanumeric(text)) throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n      let bb = [];\n      let i;\n\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n\n      if (i < text.length) appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n\n    static makeSegments(text) {\n      if (text == \"\") return [];else if (_QrSegment.isNumeric(text)) return [_QrSegment.makeNumeric(text)];else if (_QrSegment.isAlphanumeric(text)) return [_QrSegment.makeAlphanumeric(text)];else return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n    }\n\n    static makeEci(assignVal) {\n      let bb = [];\n      if (assignVal < 0) throw new RangeError(\"ECI assignment value out of range\");else if (assignVal < 1 << 7) appendBits(assignVal, 8, bb);else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1e6) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else throw new RangeError(\"ECI assignment value out of range\");\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n    }\n\n    static isNumeric(text) {\n      return _QrSegment.NUMERIC_REGEX.test(text);\n    }\n\n    static isAlphanumeric(text) {\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n\n    getData() {\n      return this.bitData.slice();\n    }\n\n    static getTotalBits(segs, version) {\n      let result = 0;\n\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits) return Infinity;\n        result += 4 + ccbits + seg.bitData.length;\n      }\n\n      return result;\n    }\n\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      let result = [];\n\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != \"%\") result.push(str.charCodeAt(i));else {\n          result.push(parseInt(str.substr(i + 1, 2), 16));\n          i += 2;\n        }\n      }\n\n      return result;\n    }\n\n  };\n\n  let QrSegment = _QrSegment;\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  qrcodegen2.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n\n(qrcodegen2 => {\n  let QrCode;\n\n  (QrCode2 => {\n    const _Ecc = class {\n      constructor(ordinal, formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n\n    };\n\n    let Ecc = _Ecc;\n    Ecc.LOW = new _Ecc(0, 1);\n    Ecc.MEDIUM = new _Ecc(1, 0);\n    Ecc.QUARTILE = new _Ecc(2, 3);\n    Ecc.HIGH = new _Ecc(3, 2);\n    QrCode2.Ecc = Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n\n(qrcodegen2 => {\n  let QrSegment;\n\n  (QrSegment2 => {\n    const _Mode = class {\n      constructor(modeBits, numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n\n    };\n\n    let Mode = _Mode;\n    Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    Mode.ECI = new _Mode(7, [0, 0, 0]);\n    QrSegment2.Mode = Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\n\nvar qrcodegen_default = qrcodegen; // src/index.tsx\n\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\n\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar MARGIN_SIZE = 4;\nvar DEFAULT_IMG_SCALE = 0.1;\n\nfunction generatePath(modules) {\n  let margin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const ops = [];\n  modules.forEach(function (row, y) {\n    let start = null;\n    row.forEach(function (cell, x) {\n      if (!cell && start !== null) {\n        ops.push(`M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`);\n        start = null;\n        return;\n      }\n\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n\n        if (start === null) {\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\n        } else {\n          ops.push(`M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`);\n        }\n\n        return;\n      }\n\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\n\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n\n      return false;\n    });\n  });\n}\n\nfunction getImageSettings(cells, size, includeMargin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  const scale = numCells / size;\n  const w = (imageSettings.width || defaultSize) * scale;\n  const h = (imageSettings.height || defaultSize) * scale;\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  let excavation = null;\n\n  if (imageSettings.excavate) {\n    let floorX = Math.floor(x);\n    let floorY = Math.floor(y);\n    let ceilW = Math.ceil(w + x - floorX);\n    let ceilH = Math.ceil(h + y - floorY);\n    excavation = {\n      x: floorX,\n      y: floorY,\n      w: ceilW,\n      h: ceilH\n    };\n  }\n\n  return {\n    x,\n    y,\n    h,\n    w,\n    excavation\n  };\n}\n\nvar SUPPORTS_PATH2D = function () {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}();\n\nfunction QRCodeCanvas(props) {\n  const _a = props,\n        {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    style,\n    imageSettings\n  } = _a,\n        otherProps = __objRest(_a, [\"value\", \"size\", \"level\", \"bgColor\", \"fgColor\", \"includeMargin\", \"style\", \"imageSettings\"]);\n\n  const imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n\n  const _canvas = useRef(null);\n\n  const _image = useRef(null);\n\n  const [isImgLoaded, setIsImageLoaded] = useState(false);\n  useEffect(() => {\n    if (_canvas.current != null) {\n      const canvas = _canvas.current;\n      const ctx = canvas.getContext(\"2d\");\n\n      if (!ctx) {\n        return;\n      }\n\n      let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n      const margin = includeMargin ? MARGIN_SIZE : 0;\n      const numCells = cells.length + margin * 2;\n      const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n      const image = _image.current;\n      const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n\n      if (haveImageToRender) {\n        if (calculatedImageSettings.excavation != null) {\n          cells = excavateModules(cells, calculatedImageSettings.excavation);\n        }\n      }\n\n      const pixelRatio = window.devicePixelRatio || 1;\n      canvas.height = canvas.width = size * pixelRatio;\n      const scale = size / numCells * pixelRatio;\n      ctx.scale(scale, scale);\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(0, 0, numCells, numCells);\n      ctx.fillStyle = fgColor;\n\n      if (SUPPORTS_PATH2D) {\n        ctx.fill(new Path2D(generatePath(cells, margin)));\n      } else {\n        cells.forEach(function (row, rdx) {\n          row.forEach(function (cell, cdx) {\n            if (cell) {\n              ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n            }\n          });\n        });\n      }\n\n      if (haveImageToRender) {\n        ctx.drawImage(image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);\n      }\n    }\n  });\n  useEffect(() => {\n    setIsImageLoaded(false);\n  }, [imgSrc]);\n\n  const canvasStyle = __spreadValues({\n    height: size,\n    width: size\n  }, style);\n\n  let img = null;\n\n  if (imgSrc != null) {\n    img = /* @__PURE__ */React.createElement(\"img\", {\n      src: imgSrc,\n      key: imgSrc,\n      style: {\n        display: \"none\"\n      },\n      onLoad: () => {\n        setIsImageLoaded(true);\n      },\n      ref: _image\n    });\n  }\n\n  return /* @__PURE__ */React.createElement(React.Fragment, null, /* @__PURE__ */React.createElement(\"canvas\", __spreadValues({\n    style: canvasStyle,\n    height: size,\n    width: size,\n    ref: _canvas\n  }, otherProps)), img);\n}\n\nfunction QRCodeSVG(props) {\n  const _a = props,\n        {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    imageSettings\n  } = _a,\n        otherProps = __objRest(_a, [\"value\", \"size\", \"level\", \"bgColor\", \"fgColor\", \"includeMargin\", \"imageSettings\"]);\n\n  let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n  let image = null;\n\n  if (imageSettings != null && calculatedImageSettings != null) {\n    if (calculatedImageSettings.excavation != null) {\n      cells = excavateModules(cells, calculatedImageSettings.excavation);\n    }\n\n    image = /* @__PURE__ */React.createElement(\"image\", {\n      xlinkHref: imageSettings.src,\n      height: calculatedImageSettings.h,\n      width: calculatedImageSettings.w,\n      x: calculatedImageSettings.x + margin,\n      y: calculatedImageSettings.y + margin,\n      preserveAspectRatio: \"none\"\n    });\n  }\n\n  const fgPath = generatePath(cells, margin);\n  return /* @__PURE__ */React.createElement(\"svg\", __spreadValues({\n    height: size,\n    width: size,\n    viewBox: `0 0 ${numCells} ${numCells}`\n  }, otherProps), /* @__PURE__ */React.createElement(\"path\", {\n    fill: bgColor,\n    d: `M0,0 h${numCells}v${numCells}H0z`,\n    shapeRendering: \"crispEdges\"\n  }), /* @__PURE__ */React.createElement(\"path\", {\n    fill: fgColor,\n    d: fgPath,\n    shapeRendering: \"crispEdges\"\n  }), image);\n}\n\nvar QRCode = props => {\n  const _a = props,\n        {\n    renderAs\n  } = _a,\n        otherProps = __objRest(_a, [\"renderAs\"]);\n\n  if (renderAs === \"svg\") {\n    return /* @__PURE__ */React.createElement(QRCodeSVG, __spreadValues({}, otherProps));\n  }\n\n  return /* @__PURE__ */React.createElement(QRCodeCanvas, __spreadValues({}, otherProps));\n};\n\nexport { QRCodeCanvas, QRCodeSVG, QRCode as default };","map":{"version":3,"names":["__defProp","Object","defineProperty","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__objRest","source","exclude","target","indexOf","React","useRef","useEffect","useState","qrcodegen","qrcodegen2","_QrCode","constructor","version","errorCorrectionLevel","dataCodewords","msk","modules","isFunction","MIN_VERSION","MAX_VERSION","RangeError","size","row","i","push","slice","drawFunctionPatterns","allCodewords","addEccAndInterleave","drawCodewords","minPenalty","applyMask","drawFormatBits","penalty","getPenaltyScore","assert","mask","encodeText","text","ecl","segs","QrSegment","makeSegments","encodeSegments","encodeBinary","data","seg","makeBytes","minVersion","maxVersion","boostEcl","dataUsedBits","dataCapacityBits2","getNumDataCodewords","usedBits","getTotalBits","newEcl","Ecc","MEDIUM","QUARTILE","HIGH","bb","appendBits","mode","modeBits","numChars","numCharCountBits","getData","length","dataCapacityBits","Math","min","padByte","forEach","getModule","x","y","getModules","setFunctionModule","drawFinderPattern","alignPatPos","getAlignmentPatternPositions","numAlign","j","drawAlignmentPattern","drawVersion","formatBits","rem","bits","getBit","color","floor","dy","dx","dist","max","abs","xx","yy","isDark","ver","numBlocks","NUM_ERROR_CORRECTION_BLOCKS","ordinal","blockEccLen","ECC_CODEWORDS_PER_BLOCK","rawCodewords","getNumRawDataModules","numShortBlocks","shortBlockLen","blocks","rsDiv","reedSolomonComputeDivisor","k","dat","ecc","reedSolomonComputeRemainder","concat","result","block","right","vert","upward","invert","Error","runColor","runX","runHistory","PENALTY_N1","finderPenaltyAddHistory","finderPenaltyCountPatterns","PENALTY_N3","finderPenaltyTerminateAndCount","runY","PENALTY_N2","dark","reduce","sum","total","ceil","PENALTY_N4","step","pos","splice","degree","root","reedSolomonMultiply","divisor","map","_","factor","shift","coef","z","n","core","currentRunColor","currentRunLength","pop","unshift","QrCode","val","len","cond","_QrSegment","bitData","Mode","BYTE","makeNumeric","digits","isNumeric","parseInt","substr","NUMERIC","makeAlphanumeric","isAlphanumeric","temp","ALPHANUMERIC_CHARSET","charAt","ALPHANUMERIC","toUtf8ByteArray","makeEci","assignVal","ECI","NUMERIC_REGEX","test","ALPHANUMERIC_REGEX","ccbits","Infinity","str","encodeURI","charCodeAt","QrCode2","_Ecc","LOW","QrSegment2","_Mode","numBitsCharCount","KANJI","qrcodegen_default","ERROR_LEVEL_MAP","L","M","Q","H","DEFAULT_SIZE","DEFAULT_LEVEL","DEFAULT_BGCOLOR","DEFAULT_FGCOLOR","DEFAULT_INCLUDEMARGIN","MARGIN_SIZE","DEFAULT_IMG_SCALE","generatePath","margin","ops","start","cell","join","excavateModules","excavation","h","w","getImageSettings","cells","includeMargin","imageSettings","numCells","defaultSize","scale","width","height","excavate","floorX","floorY","ceilW","ceilH","SUPPORTS_PATH2D","Path2D","addPath","e","QRCodeCanvas","props","_a","level","bgColor","fgColor","style","otherProps","imgSrc","src","_canvas","_image","isImgLoaded","setIsImageLoaded","current","canvas","ctx","getContext","calculatedImageSettings","image","haveImageToRender","complete","naturalHeight","naturalWidth","pixelRatio","window","devicePixelRatio","fillStyle","fillRect","fill","rdx","cdx","drawImage","canvasStyle","img","createElement","display","onLoad","ref","Fragment","QRCodeSVG","xlinkHref","preserveAspectRatio","fgPath","viewBox","d","shapeRendering","QRCode","renderAs","default"],"sources":["D:/year4sem2/evmos/campaign/node_modules/qrcode.react/lib/esm/index.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __objRest = (source, exclude) => {\n  var target = {};\n  for (var prop in source)\n    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)\n      target[prop] = source[prop];\n  if (source != null && __getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(source)) {\n      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))\n        target[prop] = source[prop];\n    }\n  return target;\n};\n\n// src/index.tsx\nimport React, { useRef, useEffect, useState } from \"react\";\n\n// src/third-party/qrcodegen/index.ts\n/**\n * @license QR Code generator library (TypeScript)\n * Copyright (c) Project Nayuki.\n * SPDX-License-Identifier: MIT\n */\nvar qrcodegen;\n((qrcodegen2) => {\n  const _QrCode = class {\n    constructor(version, errorCorrectionLevel, dataCodewords, msk) {\n      this.version = version;\n      this.errorCorrectionLevel = errorCorrectionLevel;\n      this.modules = [];\n      this.isFunction = [];\n      if (version < _QrCode.MIN_VERSION || version > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version value out of range\");\n      if (msk < -1 || msk > 7)\n        throw new RangeError(\"Mask value out of range\");\n      this.size = version * 4 + 17;\n      let row = [];\n      for (let i = 0; i < this.size; i++)\n        row.push(false);\n      for (let i = 0; i < this.size; i++) {\n        this.modules.push(row.slice());\n        this.isFunction.push(row.slice());\n      }\n      this.drawFunctionPatterns();\n      const allCodewords = this.addEccAndInterleave(dataCodewords);\n      this.drawCodewords(allCodewords);\n      if (msk == -1) {\n        let minPenalty = 1e9;\n        for (let i = 0; i < 8; i++) {\n          this.applyMask(i);\n          this.drawFormatBits(i);\n          const penalty = this.getPenaltyScore();\n          if (penalty < minPenalty) {\n            msk = i;\n            minPenalty = penalty;\n          }\n          this.applyMask(i);\n        }\n      }\n      assert(0 <= msk && msk <= 7);\n      this.mask = msk;\n      this.applyMask(msk);\n      this.drawFormatBits(msk);\n      this.isFunction = [];\n    }\n    static encodeText(text, ecl) {\n      const segs = qrcodegen2.QrSegment.makeSegments(text);\n      return _QrCode.encodeSegments(segs, ecl);\n    }\n    static encodeBinary(data, ecl) {\n      const seg = qrcodegen2.QrSegment.makeBytes(data);\n      return _QrCode.encodeSegments([seg], ecl);\n    }\n    static encodeSegments(segs, ecl, minVersion = 1, maxVersion = 40, mask = -1, boostEcl = true) {\n      if (!(_QrCode.MIN_VERSION <= minVersion && minVersion <= maxVersion && maxVersion <= _QrCode.MAX_VERSION) || mask < -1 || mask > 7)\n        throw new RangeError(\"Invalid value\");\n      let version;\n      let dataUsedBits;\n      for (version = minVersion; ; version++) {\n        const dataCapacityBits2 = _QrCode.getNumDataCodewords(version, ecl) * 8;\n        const usedBits = QrSegment.getTotalBits(segs, version);\n        if (usedBits <= dataCapacityBits2) {\n          dataUsedBits = usedBits;\n          break;\n        }\n        if (version >= maxVersion)\n          throw new RangeError(\"Data too long\");\n      }\n      for (const newEcl of [_QrCode.Ecc.MEDIUM, _QrCode.Ecc.QUARTILE, _QrCode.Ecc.HIGH]) {\n        if (boostEcl && dataUsedBits <= _QrCode.getNumDataCodewords(version, newEcl) * 8)\n          ecl = newEcl;\n      }\n      let bb = [];\n      for (const seg of segs) {\n        appendBits(seg.mode.modeBits, 4, bb);\n        appendBits(seg.numChars, seg.mode.numCharCountBits(version), bb);\n        for (const b of seg.getData())\n          bb.push(b);\n      }\n      assert(bb.length == dataUsedBits);\n      const dataCapacityBits = _QrCode.getNumDataCodewords(version, ecl) * 8;\n      assert(bb.length <= dataCapacityBits);\n      appendBits(0, Math.min(4, dataCapacityBits - bb.length), bb);\n      appendBits(0, (8 - bb.length % 8) % 8, bb);\n      assert(bb.length % 8 == 0);\n      for (let padByte = 236; bb.length < dataCapacityBits; padByte ^= 236 ^ 17)\n        appendBits(padByte, 8, bb);\n      let dataCodewords = [];\n      while (dataCodewords.length * 8 < bb.length)\n        dataCodewords.push(0);\n      bb.forEach((b, i) => dataCodewords[i >>> 3] |= b << 7 - (i & 7));\n      return new _QrCode(version, ecl, dataCodewords, mask);\n    }\n    getModule(x, y) {\n      return 0 <= x && x < this.size && 0 <= y && y < this.size && this.modules[y][x];\n    }\n    getModules() {\n      return this.modules;\n    }\n    drawFunctionPatterns() {\n      for (let i = 0; i < this.size; i++) {\n        this.setFunctionModule(6, i, i % 2 == 0);\n        this.setFunctionModule(i, 6, i % 2 == 0);\n      }\n      this.drawFinderPattern(3, 3);\n      this.drawFinderPattern(this.size - 4, 3);\n      this.drawFinderPattern(3, this.size - 4);\n      const alignPatPos = this.getAlignmentPatternPositions();\n      const numAlign = alignPatPos.length;\n      for (let i = 0; i < numAlign; i++) {\n        for (let j = 0; j < numAlign; j++) {\n          if (!(i == 0 && j == 0 || i == 0 && j == numAlign - 1 || i == numAlign - 1 && j == 0))\n            this.drawAlignmentPattern(alignPatPos[i], alignPatPos[j]);\n        }\n      }\n      this.drawFormatBits(0);\n      this.drawVersion();\n    }\n    drawFormatBits(mask) {\n      const data = this.errorCorrectionLevel.formatBits << 3 | mask;\n      let rem = data;\n      for (let i = 0; i < 10; i++)\n        rem = rem << 1 ^ (rem >>> 9) * 1335;\n      const bits = (data << 10 | rem) ^ 21522;\n      assert(bits >>> 15 == 0);\n      for (let i = 0; i <= 5; i++)\n        this.setFunctionModule(8, i, getBit(bits, i));\n      this.setFunctionModule(8, 7, getBit(bits, 6));\n      this.setFunctionModule(8, 8, getBit(bits, 7));\n      this.setFunctionModule(7, 8, getBit(bits, 8));\n      for (let i = 9; i < 15; i++)\n        this.setFunctionModule(14 - i, 8, getBit(bits, i));\n      for (let i = 0; i < 8; i++)\n        this.setFunctionModule(this.size - 1 - i, 8, getBit(bits, i));\n      for (let i = 8; i < 15; i++)\n        this.setFunctionModule(8, this.size - 15 + i, getBit(bits, i));\n      this.setFunctionModule(8, this.size - 8, true);\n    }\n    drawVersion() {\n      if (this.version < 7)\n        return;\n      let rem = this.version;\n      for (let i = 0; i < 12; i++)\n        rem = rem << 1 ^ (rem >>> 11) * 7973;\n      const bits = this.version << 12 | rem;\n      assert(bits >>> 18 == 0);\n      for (let i = 0; i < 18; i++) {\n        const color = getBit(bits, i);\n        const a = this.size - 11 + i % 3;\n        const b = Math.floor(i / 3);\n        this.setFunctionModule(a, b, color);\n        this.setFunctionModule(b, a, color);\n      }\n    }\n    drawFinderPattern(x, y) {\n      for (let dy = -4; dy <= 4; dy++) {\n        for (let dx = -4; dx <= 4; dx++) {\n          const dist = Math.max(Math.abs(dx), Math.abs(dy));\n          const xx = x + dx;\n          const yy = y + dy;\n          if (0 <= xx && xx < this.size && 0 <= yy && yy < this.size)\n            this.setFunctionModule(xx, yy, dist != 2 && dist != 4);\n        }\n      }\n    }\n    drawAlignmentPattern(x, y) {\n      for (let dy = -2; dy <= 2; dy++) {\n        for (let dx = -2; dx <= 2; dx++)\n          this.setFunctionModule(x + dx, y + dy, Math.max(Math.abs(dx), Math.abs(dy)) != 1);\n      }\n    }\n    setFunctionModule(x, y, isDark) {\n      this.modules[y][x] = isDark;\n      this.isFunction[y][x] = true;\n    }\n    addEccAndInterleave(data) {\n      const ver = this.version;\n      const ecl = this.errorCorrectionLevel;\n      if (data.length != _QrCode.getNumDataCodewords(ver, ecl))\n        throw new RangeError(\"Invalid argument\");\n      const numBlocks = _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n      const blockEccLen = _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver];\n      const rawCodewords = Math.floor(_QrCode.getNumRawDataModules(ver) / 8);\n      const numShortBlocks = numBlocks - rawCodewords % numBlocks;\n      const shortBlockLen = Math.floor(rawCodewords / numBlocks);\n      let blocks = [];\n      const rsDiv = _QrCode.reedSolomonComputeDivisor(blockEccLen);\n      for (let i = 0, k = 0; i < numBlocks; i++) {\n        let dat = data.slice(k, k + shortBlockLen - blockEccLen + (i < numShortBlocks ? 0 : 1));\n        k += dat.length;\n        const ecc = _QrCode.reedSolomonComputeRemainder(dat, rsDiv);\n        if (i < numShortBlocks)\n          dat.push(0);\n        blocks.push(dat.concat(ecc));\n      }\n      let result = [];\n      for (let i = 0; i < blocks[0].length; i++) {\n        blocks.forEach((block, j) => {\n          if (i != shortBlockLen - blockEccLen || j >= numShortBlocks)\n            result.push(block[i]);\n        });\n      }\n      assert(result.length == rawCodewords);\n      return result;\n    }\n    drawCodewords(data) {\n      if (data.length != Math.floor(_QrCode.getNumRawDataModules(this.version) / 8))\n        throw new RangeError(\"Invalid argument\");\n      let i = 0;\n      for (let right = this.size - 1; right >= 1; right -= 2) {\n        if (right == 6)\n          right = 5;\n        for (let vert = 0; vert < this.size; vert++) {\n          for (let j = 0; j < 2; j++) {\n            const x = right - j;\n            const upward = (right + 1 & 2) == 0;\n            const y = upward ? this.size - 1 - vert : vert;\n            if (!this.isFunction[y][x] && i < data.length * 8) {\n              this.modules[y][x] = getBit(data[i >>> 3], 7 - (i & 7));\n              i++;\n            }\n          }\n        }\n      }\n      assert(i == data.length * 8);\n    }\n    applyMask(mask) {\n      if (mask < 0 || mask > 7)\n        throw new RangeError(\"Mask value out of range\");\n      for (let y = 0; y < this.size; y++) {\n        for (let x = 0; x < this.size; x++) {\n          let invert;\n          switch (mask) {\n            case 0:\n              invert = (x + y) % 2 == 0;\n              break;\n            case 1:\n              invert = y % 2 == 0;\n              break;\n            case 2:\n              invert = x % 3 == 0;\n              break;\n            case 3:\n              invert = (x + y) % 3 == 0;\n              break;\n            case 4:\n              invert = (Math.floor(x / 3) + Math.floor(y / 2)) % 2 == 0;\n              break;\n            case 5:\n              invert = x * y % 2 + x * y % 3 == 0;\n              break;\n            case 6:\n              invert = (x * y % 2 + x * y % 3) % 2 == 0;\n              break;\n            case 7:\n              invert = ((x + y) % 2 + x * y % 3) % 2 == 0;\n              break;\n            default:\n              throw new Error(\"Unreachable\");\n          }\n          if (!this.isFunction[y][x] && invert)\n            this.modules[y][x] = !this.modules[y][x];\n        }\n      }\n    }\n    getPenaltyScore() {\n      let result = 0;\n      for (let y = 0; y < this.size; y++) {\n        let runColor = false;\n        let runX = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let x = 0; x < this.size; x++) {\n          if (this.modules[y][x] == runColor) {\n            runX++;\n            if (runX == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runX > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runX, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runX = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runX, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let x = 0; x < this.size; x++) {\n        let runColor = false;\n        let runY = 0;\n        let runHistory = [0, 0, 0, 0, 0, 0, 0];\n        for (let y = 0; y < this.size; y++) {\n          if (this.modules[y][x] == runColor) {\n            runY++;\n            if (runY == 5)\n              result += _QrCode.PENALTY_N1;\n            else if (runY > 5)\n              result++;\n          } else {\n            this.finderPenaltyAddHistory(runY, runHistory);\n            if (!runColor)\n              result += this.finderPenaltyCountPatterns(runHistory) * _QrCode.PENALTY_N3;\n            runColor = this.modules[y][x];\n            runY = 1;\n          }\n        }\n        result += this.finderPenaltyTerminateAndCount(runColor, runY, runHistory) * _QrCode.PENALTY_N3;\n      }\n      for (let y = 0; y < this.size - 1; y++) {\n        for (let x = 0; x < this.size - 1; x++) {\n          const color = this.modules[y][x];\n          if (color == this.modules[y][x + 1] && color == this.modules[y + 1][x] && color == this.modules[y + 1][x + 1])\n            result += _QrCode.PENALTY_N2;\n        }\n      }\n      let dark = 0;\n      for (const row of this.modules)\n        dark = row.reduce((sum, color) => sum + (color ? 1 : 0), dark);\n      const total = this.size * this.size;\n      const k = Math.ceil(Math.abs(dark * 20 - total * 10) / total) - 1;\n      assert(0 <= k && k <= 9);\n      result += k * _QrCode.PENALTY_N4;\n      assert(0 <= result && result <= 2568888);\n      return result;\n    }\n    getAlignmentPatternPositions() {\n      if (this.version == 1)\n        return [];\n      else {\n        const numAlign = Math.floor(this.version / 7) + 2;\n        const step = this.version == 32 ? 26 : Math.ceil((this.version * 4 + 4) / (numAlign * 2 - 2)) * 2;\n        let result = [6];\n        for (let pos = this.size - 7; result.length < numAlign; pos -= step)\n          result.splice(1, 0, pos);\n        return result;\n      }\n    }\n    static getNumRawDataModules(ver) {\n      if (ver < _QrCode.MIN_VERSION || ver > _QrCode.MAX_VERSION)\n        throw new RangeError(\"Version number out of range\");\n      let result = (16 * ver + 128) * ver + 64;\n      if (ver >= 2) {\n        const numAlign = Math.floor(ver / 7) + 2;\n        result -= (25 * numAlign - 10) * numAlign - 55;\n        if (ver >= 7)\n          result -= 36;\n      }\n      assert(208 <= result && result <= 29648);\n      return result;\n    }\n    static getNumDataCodewords(ver, ecl) {\n      return Math.floor(_QrCode.getNumRawDataModules(ver) / 8) - _QrCode.ECC_CODEWORDS_PER_BLOCK[ecl.ordinal][ver] * _QrCode.NUM_ERROR_CORRECTION_BLOCKS[ecl.ordinal][ver];\n    }\n    static reedSolomonComputeDivisor(degree) {\n      if (degree < 1 || degree > 255)\n        throw new RangeError(\"Degree out of range\");\n      let result = [];\n      for (let i = 0; i < degree - 1; i++)\n        result.push(0);\n      result.push(1);\n      let root = 1;\n      for (let i = 0; i < degree; i++) {\n        for (let j = 0; j < result.length; j++) {\n          result[j] = _QrCode.reedSolomonMultiply(result[j], root);\n          if (j + 1 < result.length)\n            result[j] ^= result[j + 1];\n        }\n        root = _QrCode.reedSolomonMultiply(root, 2);\n      }\n      return result;\n    }\n    static reedSolomonComputeRemainder(data, divisor) {\n      let result = divisor.map((_) => 0);\n      for (const b of data) {\n        const factor = b ^ result.shift();\n        result.push(0);\n        divisor.forEach((coef, i) => result[i] ^= _QrCode.reedSolomonMultiply(coef, factor));\n      }\n      return result;\n    }\n    static reedSolomonMultiply(x, y) {\n      if (x >>> 8 != 0 || y >>> 8 != 0)\n        throw new RangeError(\"Byte out of range\");\n      let z = 0;\n      for (let i = 7; i >= 0; i--) {\n        z = z << 1 ^ (z >>> 7) * 285;\n        z ^= (y >>> i & 1) * x;\n      }\n      assert(z >>> 8 == 0);\n      return z;\n    }\n    finderPenaltyCountPatterns(runHistory) {\n      const n = runHistory[1];\n      assert(n <= this.size * 3);\n      const core = n > 0 && runHistory[2] == n && runHistory[3] == n * 3 && runHistory[4] == n && runHistory[5] == n;\n      return (core && runHistory[0] >= n * 4 && runHistory[6] >= n ? 1 : 0) + (core && runHistory[6] >= n * 4 && runHistory[0] >= n ? 1 : 0);\n    }\n    finderPenaltyTerminateAndCount(currentRunColor, currentRunLength, runHistory) {\n      if (currentRunColor) {\n        this.finderPenaltyAddHistory(currentRunLength, runHistory);\n        currentRunLength = 0;\n      }\n      currentRunLength += this.size;\n      this.finderPenaltyAddHistory(currentRunLength, runHistory);\n      return this.finderPenaltyCountPatterns(runHistory);\n    }\n    finderPenaltyAddHistory(currentRunLength, runHistory) {\n      if (runHistory[0] == 0)\n        currentRunLength += this.size;\n      runHistory.pop();\n      runHistory.unshift(currentRunLength);\n    }\n  };\n  let QrCode = _QrCode;\n  QrCode.MIN_VERSION = 1;\n  QrCode.MAX_VERSION = 40;\n  QrCode.PENALTY_N1 = 3;\n  QrCode.PENALTY_N2 = 3;\n  QrCode.PENALTY_N3 = 40;\n  QrCode.PENALTY_N4 = 10;\n  QrCode.ECC_CODEWORDS_PER_BLOCK = [\n    [-1, 7, 10, 15, 20, 26, 18, 20, 24, 30, 18, 20, 24, 26, 30, 22, 24, 28, 30, 28, 28, 28, 28, 30, 30, 26, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 10, 16, 26, 18, 24, 16, 18, 22, 22, 26, 30, 22, 22, 24, 24, 28, 28, 26, 26, 26, 26, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28],\n    [-1, 13, 22, 18, 26, 18, 24, 18, 22, 20, 24, 28, 26, 24, 20, 30, 24, 28, 28, 26, 30, 28, 30, 30, 30, 30, 28, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30],\n    [-1, 17, 28, 22, 16, 22, 28, 26, 26, 24, 28, 24, 28, 22, 24, 24, 30, 28, 28, 26, 28, 30, 24, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30]\n  ];\n  QrCode.NUM_ERROR_CORRECTION_BLOCKS = [\n    [-1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 4, 4, 4, 6, 6, 6, 6, 7, 8, 8, 9, 9, 10, 12, 12, 12, 13, 14, 15, 16, 17, 18, 19, 19, 20, 21, 22, 24, 25],\n    [-1, 1, 1, 1, 2, 2, 4, 4, 4, 5, 5, 5, 8, 9, 9, 10, 10, 11, 13, 14, 16, 17, 17, 18, 20, 21, 23, 25, 26, 28, 29, 31, 33, 35, 37, 38, 40, 43, 45, 47, 49],\n    [-1, 1, 1, 2, 2, 4, 4, 6, 6, 8, 8, 8, 10, 12, 16, 12, 17, 16, 18, 21, 20, 23, 23, 25, 27, 29, 34, 34, 35, 38, 40, 43, 45, 48, 51, 53, 56, 59, 62, 65, 68],\n    [-1, 1, 1, 2, 4, 4, 4, 5, 6, 8, 8, 11, 11, 16, 16, 18, 16, 19, 21, 25, 25, 25, 34, 30, 32, 35, 37, 40, 42, 45, 48, 51, 54, 57, 60, 63, 66, 70, 74, 77, 81]\n  ];\n  qrcodegen2.QrCode = QrCode;\n  function appendBits(val, len, bb) {\n    if (len < 0 || len > 31 || val >>> len != 0)\n      throw new RangeError(\"Value out of range\");\n    for (let i = len - 1; i >= 0; i--)\n      bb.push(val >>> i & 1);\n  }\n  function getBit(x, i) {\n    return (x >>> i & 1) != 0;\n  }\n  function assert(cond) {\n    if (!cond)\n      throw new Error(\"Assertion error\");\n  }\n  const _QrSegment = class {\n    constructor(mode, numChars, bitData) {\n      this.mode = mode;\n      this.numChars = numChars;\n      this.bitData = bitData;\n      if (numChars < 0)\n        throw new RangeError(\"Invalid argument\");\n      this.bitData = bitData.slice();\n    }\n    static makeBytes(data) {\n      let bb = [];\n      for (const b of data)\n        appendBits(b, 8, bb);\n      return new _QrSegment(_QrSegment.Mode.BYTE, data.length, bb);\n    }\n    static makeNumeric(digits) {\n      if (!_QrSegment.isNumeric(digits))\n        throw new RangeError(\"String contains non-numeric characters\");\n      let bb = [];\n      for (let i = 0; i < digits.length; ) {\n        const n = Math.min(digits.length - i, 3);\n        appendBits(parseInt(digits.substr(i, n), 10), n * 3 + 1, bb);\n        i += n;\n      }\n      return new _QrSegment(_QrSegment.Mode.NUMERIC, digits.length, bb);\n    }\n    static makeAlphanumeric(text) {\n      if (!_QrSegment.isAlphanumeric(text))\n        throw new RangeError(\"String contains unencodable characters in alphanumeric mode\");\n      let bb = [];\n      let i;\n      for (i = 0; i + 2 <= text.length; i += 2) {\n        let temp = _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)) * 45;\n        temp += _QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i + 1));\n        appendBits(temp, 11, bb);\n      }\n      if (i < text.length)\n        appendBits(_QrSegment.ALPHANUMERIC_CHARSET.indexOf(text.charAt(i)), 6, bb);\n      return new _QrSegment(_QrSegment.Mode.ALPHANUMERIC, text.length, bb);\n    }\n    static makeSegments(text) {\n      if (text == \"\")\n        return [];\n      else if (_QrSegment.isNumeric(text))\n        return [_QrSegment.makeNumeric(text)];\n      else if (_QrSegment.isAlphanumeric(text))\n        return [_QrSegment.makeAlphanumeric(text)];\n      else\n        return [_QrSegment.makeBytes(_QrSegment.toUtf8ByteArray(text))];\n    }\n    static makeEci(assignVal) {\n      let bb = [];\n      if (assignVal < 0)\n        throw new RangeError(\"ECI assignment value out of range\");\n      else if (assignVal < 1 << 7)\n        appendBits(assignVal, 8, bb);\n      else if (assignVal < 1 << 14) {\n        appendBits(2, 2, bb);\n        appendBits(assignVal, 14, bb);\n      } else if (assignVal < 1e6) {\n        appendBits(6, 3, bb);\n        appendBits(assignVal, 21, bb);\n      } else\n        throw new RangeError(\"ECI assignment value out of range\");\n      return new _QrSegment(_QrSegment.Mode.ECI, 0, bb);\n    }\n    static isNumeric(text) {\n      return _QrSegment.NUMERIC_REGEX.test(text);\n    }\n    static isAlphanumeric(text) {\n      return _QrSegment.ALPHANUMERIC_REGEX.test(text);\n    }\n    getData() {\n      return this.bitData.slice();\n    }\n    static getTotalBits(segs, version) {\n      let result = 0;\n      for (const seg of segs) {\n        const ccbits = seg.mode.numCharCountBits(version);\n        if (seg.numChars >= 1 << ccbits)\n          return Infinity;\n        result += 4 + ccbits + seg.bitData.length;\n      }\n      return result;\n    }\n    static toUtf8ByteArray(str) {\n      str = encodeURI(str);\n      let result = [];\n      for (let i = 0; i < str.length; i++) {\n        if (str.charAt(i) != \"%\")\n          result.push(str.charCodeAt(i));\n        else {\n          result.push(parseInt(str.substr(i + 1, 2), 16));\n          i += 2;\n        }\n      }\n      return result;\n    }\n  };\n  let QrSegment = _QrSegment;\n  QrSegment.NUMERIC_REGEX = /^[0-9]*$/;\n  QrSegment.ALPHANUMERIC_REGEX = /^[A-Z0-9 $%*+.\\/:-]*$/;\n  QrSegment.ALPHANUMERIC_CHARSET = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:\";\n  qrcodegen2.QrSegment = QrSegment;\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrCode;\n  ((QrCode2) => {\n    const _Ecc = class {\n      constructor(ordinal, formatBits) {\n        this.ordinal = ordinal;\n        this.formatBits = formatBits;\n      }\n    };\n    let Ecc = _Ecc;\n    Ecc.LOW = new _Ecc(0, 1);\n    Ecc.MEDIUM = new _Ecc(1, 0);\n    Ecc.QUARTILE = new _Ecc(2, 3);\n    Ecc.HIGH = new _Ecc(3, 2);\n    QrCode2.Ecc = Ecc;\n  })(QrCode = qrcodegen2.QrCode || (qrcodegen2.QrCode = {}));\n})(qrcodegen || (qrcodegen = {}));\n((qrcodegen2) => {\n  let QrSegment;\n  ((QrSegment2) => {\n    const _Mode = class {\n      constructor(modeBits, numBitsCharCount) {\n        this.modeBits = modeBits;\n        this.numBitsCharCount = numBitsCharCount;\n      }\n      numCharCountBits(ver) {\n        return this.numBitsCharCount[Math.floor((ver + 7) / 17)];\n      }\n    };\n    let Mode = _Mode;\n    Mode.NUMERIC = new _Mode(1, [10, 12, 14]);\n    Mode.ALPHANUMERIC = new _Mode(2, [9, 11, 13]);\n    Mode.BYTE = new _Mode(4, [8, 16, 16]);\n    Mode.KANJI = new _Mode(8, [8, 10, 12]);\n    Mode.ECI = new _Mode(7, [0, 0, 0]);\n    QrSegment2.Mode = Mode;\n  })(QrSegment = qrcodegen2.QrSegment || (qrcodegen2.QrSegment = {}));\n})(qrcodegen || (qrcodegen = {}));\nvar qrcodegen_default = qrcodegen;\n\n// src/index.tsx\n/**\n * @license qrcode.react\n * Copyright (c) Paul O'Shannessy\n * SPDX-License-Identifier: ISC\n */\nvar ERROR_LEVEL_MAP = {\n  L: qrcodegen_default.QrCode.Ecc.LOW,\n  M: qrcodegen_default.QrCode.Ecc.MEDIUM,\n  Q: qrcodegen_default.QrCode.Ecc.QUARTILE,\n  H: qrcodegen_default.QrCode.Ecc.HIGH\n};\nvar DEFAULT_SIZE = 128;\nvar DEFAULT_LEVEL = \"L\";\nvar DEFAULT_BGCOLOR = \"#FFFFFF\";\nvar DEFAULT_FGCOLOR = \"#000000\";\nvar DEFAULT_INCLUDEMARGIN = false;\nvar MARGIN_SIZE = 4;\nvar DEFAULT_IMG_SCALE = 0.1;\nfunction generatePath(modules, margin = 0) {\n  const ops = [];\n  modules.forEach(function(row, y) {\n    let start = null;\n    row.forEach(function(cell, x) {\n      if (!cell && start !== null) {\n        ops.push(`M${start + margin} ${y + margin}h${x - start}v1H${start + margin}z`);\n        start = null;\n        return;\n      }\n      if (x === row.length - 1) {\n        if (!cell) {\n          return;\n        }\n        if (start === null) {\n          ops.push(`M${x + margin},${y + margin} h1v1H${x + margin}z`);\n        } else {\n          ops.push(`M${start + margin},${y + margin} h${x + 1 - start}v1H${start + margin}z`);\n        }\n        return;\n      }\n      if (cell && start === null) {\n        start = x;\n      }\n    });\n  });\n  return ops.join(\"\");\n}\nfunction excavateModules(modules, excavation) {\n  return modules.slice().map((row, y) => {\n    if (y < excavation.y || y >= excavation.y + excavation.h) {\n      return row;\n    }\n    return row.map((cell, x) => {\n      if (x < excavation.x || x >= excavation.x + excavation.w) {\n        return cell;\n      }\n      return false;\n    });\n  });\n}\nfunction getImageSettings(cells, size, includeMargin, imageSettings) {\n  if (imageSettings == null) {\n    return null;\n  }\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const defaultSize = Math.floor(size * DEFAULT_IMG_SCALE);\n  const scale = numCells / size;\n  const w = (imageSettings.width || defaultSize) * scale;\n  const h = (imageSettings.height || defaultSize) * scale;\n  const x = imageSettings.x == null ? cells.length / 2 - w / 2 : imageSettings.x * scale;\n  const y = imageSettings.y == null ? cells.length / 2 - h / 2 : imageSettings.y * scale;\n  let excavation = null;\n  if (imageSettings.excavate) {\n    let floorX = Math.floor(x);\n    let floorY = Math.floor(y);\n    let ceilW = Math.ceil(w + x - floorX);\n    let ceilH = Math.ceil(h + y - floorY);\n    excavation = { x: floorX, y: floorY, w: ceilW, h: ceilH };\n  }\n  return { x, y, h, w, excavation };\n}\nvar SUPPORTS_PATH2D = function() {\n  try {\n    new Path2D().addPath(new Path2D());\n  } catch (e) {\n    return false;\n  }\n  return true;\n}();\nfunction QRCodeCanvas(props) {\n  const _a = props, {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    style,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"includeMargin\",\n    \"style\",\n    \"imageSettings\"\n  ]);\n  const imgSrc = imageSettings == null ? void 0 : imageSettings.src;\n  const _canvas = useRef(null);\n  const _image = useRef(null);\n  const [isImgLoaded, setIsImageLoaded] = useState(false);\n  useEffect(() => {\n    if (_canvas.current != null) {\n      const canvas = _canvas.current;\n      const ctx = canvas.getContext(\"2d\");\n      if (!ctx) {\n        return;\n      }\n      let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n      const margin = includeMargin ? MARGIN_SIZE : 0;\n      const numCells = cells.length + margin * 2;\n      const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n      const image = _image.current;\n      const haveImageToRender = calculatedImageSettings != null && image !== null && image.complete && image.naturalHeight !== 0 && image.naturalWidth !== 0;\n      if (haveImageToRender) {\n        if (calculatedImageSettings.excavation != null) {\n          cells = excavateModules(cells, calculatedImageSettings.excavation);\n        }\n      }\n      const pixelRatio = window.devicePixelRatio || 1;\n      canvas.height = canvas.width = size * pixelRatio;\n      const scale = size / numCells * pixelRatio;\n      ctx.scale(scale, scale);\n      ctx.fillStyle = bgColor;\n      ctx.fillRect(0, 0, numCells, numCells);\n      ctx.fillStyle = fgColor;\n      if (SUPPORTS_PATH2D) {\n        ctx.fill(new Path2D(generatePath(cells, margin)));\n      } else {\n        cells.forEach(function(row, rdx) {\n          row.forEach(function(cell, cdx) {\n            if (cell) {\n              ctx.fillRect(cdx + margin, rdx + margin, 1, 1);\n            }\n          });\n        });\n      }\n      if (haveImageToRender) {\n        ctx.drawImage(image, calculatedImageSettings.x + margin, calculatedImageSettings.y + margin, calculatedImageSettings.w, calculatedImageSettings.h);\n      }\n    }\n  });\n  useEffect(() => {\n    setIsImageLoaded(false);\n  }, [imgSrc]);\n  const canvasStyle = __spreadValues({ height: size, width: size }, style);\n  let img = null;\n  if (imgSrc != null) {\n    img = /* @__PURE__ */ React.createElement(\"img\", {\n      src: imgSrc,\n      key: imgSrc,\n      style: { display: \"none\" },\n      onLoad: () => {\n        setIsImageLoaded(true);\n      },\n      ref: _image\n    });\n  }\n  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(\"canvas\", __spreadValues({\n    style: canvasStyle,\n    height: size,\n    width: size,\n    ref: _canvas\n  }, otherProps)), img);\n}\nfunction QRCodeSVG(props) {\n  const _a = props, {\n    value,\n    size = DEFAULT_SIZE,\n    level = DEFAULT_LEVEL,\n    bgColor = DEFAULT_BGCOLOR,\n    fgColor = DEFAULT_FGCOLOR,\n    includeMargin = DEFAULT_INCLUDEMARGIN,\n    imageSettings\n  } = _a, otherProps = __objRest(_a, [\n    \"value\",\n    \"size\",\n    \"level\",\n    \"bgColor\",\n    \"fgColor\",\n    \"includeMargin\",\n    \"imageSettings\"\n  ]);\n  let cells = qrcodegen_default.QrCode.encodeText(value, ERROR_LEVEL_MAP[level]).getModules();\n  const margin = includeMargin ? MARGIN_SIZE : 0;\n  const numCells = cells.length + margin * 2;\n  const calculatedImageSettings = getImageSettings(cells, size, includeMargin, imageSettings);\n  let image = null;\n  if (imageSettings != null && calculatedImageSettings != null) {\n    if (calculatedImageSettings.excavation != null) {\n      cells = excavateModules(cells, calculatedImageSettings.excavation);\n    }\n    image = /* @__PURE__ */ React.createElement(\"image\", {\n      xlinkHref: imageSettings.src,\n      height: calculatedImageSettings.h,\n      width: calculatedImageSettings.w,\n      x: calculatedImageSettings.x + margin,\n      y: calculatedImageSettings.y + margin,\n      preserveAspectRatio: \"none\"\n    });\n  }\n  const fgPath = generatePath(cells, margin);\n  return /* @__PURE__ */ React.createElement(\"svg\", __spreadValues({\n    height: size,\n    width: size,\n    viewBox: `0 0 ${numCells} ${numCells}`\n  }, otherProps), /* @__PURE__ */ React.createElement(\"path\", {\n    fill: bgColor,\n    d: `M0,0 h${numCells}v${numCells}H0z`,\n    shapeRendering: \"crispEdges\"\n  }), /* @__PURE__ */ React.createElement(\"path\", {\n    fill: fgColor,\n    d: fgPath,\n    shapeRendering: \"crispEdges\"\n  }), image);\n}\nvar QRCode = (props) => {\n  const _a = props, { renderAs } = _a, otherProps = __objRest(_a, [\"renderAs\"]);\n  if (renderAs === \"svg\") {\n    return /* @__PURE__ */ React.createElement(QRCodeSVG, __spreadValues({}, otherProps));\n  }\n  return /* @__PURE__ */ React.createElement(QRCodeCanvas, __spreadValues({}, otherProps));\n};\nexport {\n  QRCodeCanvas,\n  QRCodeSVG,\n  QRCode as default\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}