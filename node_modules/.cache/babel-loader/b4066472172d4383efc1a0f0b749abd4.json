{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport classNames from 'classnames';\nimport RcUpload from 'rc-upload';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport * as React from 'react';\nimport { flushSync } from 'react-dom';\nimport { ConfigContext } from '../config-provider';\nimport DisabledContext from '../config-provider/DisabledContext';\nimport LocaleReceiver from '../locale/LocaleReceiver';\nimport defaultLocale from '../locale/en_US';\nimport warning from '../_util/warning';\nimport UploadList from './UploadList';\nimport { file2Obj, getFileItem, removeFileItem, updateFileList } from './utils';\nimport useStyle from './style';\nexport const LIST_IGNORE = `__LIST_IGNORE_${Date.now()}__`;\n\nconst InternalUpload = (props, ref) => {\n  const {\n    fileList,\n    defaultFileList,\n    onRemove,\n    showUploadList = true,\n    listType = 'text',\n    onPreview,\n    onDownload,\n    onChange,\n    onDrop,\n    previewFile,\n    disabled: customDisabled,\n    locale: propLocale,\n    iconRender,\n    isImageUrl,\n    progress,\n    prefixCls: customizePrefixCls,\n    className,\n    type = 'select',\n    children,\n    style,\n    itemRender,\n    maxCount,\n    data = {},\n    multiple = false,\n    action = '',\n    accept = '',\n    supportServerRender = true\n  } = props; // ===================== Disabled =====================\n\n  const disabled = React.useContext(DisabledContext);\n  const mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;\n  const [mergedFileList, setMergedFileList] = useMergedState(defaultFileList || [], {\n    value: fileList,\n    postState: list => list !== null && list !== void 0 ? list : []\n  });\n  const [dragState, setDragState] = React.useState('drop');\n  const upload = React.useRef(null);\n  process.env.NODE_ENV !== \"production\" ? warning('fileList' in props || !('value' in props), 'Upload', '`value` is not a valid prop, do you mean `fileList`?') : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!('transformFile' in props), 'Upload', '`transformFile` is deprecated. Please use `beforeUpload` directly.') : void 0; // Control mode will auto fill file uid if not provided\n\n  React.useMemo(() => {\n    const timestamp = Date.now();\n    (fileList || []).forEach((file, index) => {\n      if (!file.uid && !Object.isFrozen(file)) {\n        file.uid = `__AUTO__${timestamp}_${index}__`;\n      }\n    });\n  }, [fileList]);\n\n  const onInternalChange = (file, changedFileList, event) => {\n    let cloneList = _toConsumableArray(changedFileList); // Cut to match count\n\n\n    if (maxCount === 1) {\n      cloneList = cloneList.slice(-1);\n    } else if (maxCount) {\n      cloneList = cloneList.slice(0, maxCount);\n    } // Prevent React18 auto batch since input[upload] trigger process at same time\n    // which makes fileList closure problem\n\n\n    flushSync(() => {\n      setMergedFileList(cloneList);\n    });\n    const changeInfo = {\n      file: file,\n      fileList: cloneList\n    };\n\n    if (event) {\n      changeInfo.event = event;\n    }\n\n    onChange === null || onChange === void 0 ? void 0 : onChange(changeInfo);\n  };\n\n  const mergedBeforeUpload = (file, fileListArgs) => __awaiter(void 0, void 0, void 0, function* () {\n    const {\n      beforeUpload,\n      transformFile\n    } = props;\n    let parsedFile = file;\n\n    if (beforeUpload) {\n      const result = yield beforeUpload(file, fileListArgs);\n\n      if (result === false) {\n        return false;\n      } // Hack for LIST_IGNORE, we add additional info to remove from the list\n\n\n      delete file[LIST_IGNORE];\n\n      if (result === LIST_IGNORE) {\n        Object.defineProperty(file, LIST_IGNORE, {\n          value: true,\n          configurable: true\n        });\n        return false;\n      }\n\n      if (typeof result === 'object' && result) {\n        parsedFile = result;\n      }\n    }\n\n    if (transformFile) {\n      parsedFile = yield transformFile(parsedFile);\n    }\n\n    return parsedFile;\n  });\n\n  const onBatchStart = batchFileInfoList => {\n    // Skip file which marked as `LIST_IGNORE`, these file will not add to file list\n    const filteredFileInfoList = batchFileInfoList.filter(info => !info.file[LIST_IGNORE]); // Nothing to do since no file need upload\n\n    if (!filteredFileInfoList.length) {\n      return;\n    }\n\n    const objectFileList = filteredFileInfoList.map(info => file2Obj(info.file)); // Concat new files with prev files\n\n    let newFileList = _toConsumableArray(mergedFileList);\n\n    objectFileList.forEach(fileObj => {\n      // Replace file if exist\n      newFileList = updateFileList(fileObj, newFileList);\n    });\n    objectFileList.forEach((fileObj, index) => {\n      // Repeat trigger `onChange` event for compatible\n      let triggerFileObj = fileObj;\n\n      if (!filteredFileInfoList[index].parsedFile) {\n        // `beforeUpload` return false\n        const {\n          originFileObj\n        } = fileObj;\n        let clone;\n\n        try {\n          clone = new File([originFileObj], originFileObj.name, {\n            type: originFileObj.type\n          });\n        } catch (e) {\n          clone = new Blob([originFileObj], {\n            type: originFileObj.type\n          });\n          clone.name = originFileObj.name;\n          clone.lastModifiedDate = new Date();\n          clone.lastModified = new Date().getTime();\n        }\n\n        clone.uid = fileObj.uid;\n        triggerFileObj = clone;\n      } else {\n        // Inject `uploading` status\n        fileObj.status = 'uploading';\n      }\n\n      onInternalChange(triggerFileObj, newFileList);\n    });\n  };\n\n  const onSuccess = (response, file, xhr) => {\n    try {\n      if (typeof response === 'string') {\n        response = JSON.parse(response);\n      }\n    } catch (e) {\n      /* do nothing */\n    } // removed\n\n\n    if (!getFileItem(file, mergedFileList)) {\n      return;\n    }\n\n    const targetItem = file2Obj(file);\n    targetItem.status = 'done';\n    targetItem.percent = 100;\n    targetItem.response = response;\n    targetItem.xhr = xhr;\n    const nextFileList = updateFileList(targetItem, mergedFileList);\n    onInternalChange(targetItem, nextFileList);\n  };\n\n  const onProgress = (e, file) => {\n    // removed\n    if (!getFileItem(file, mergedFileList)) {\n      return;\n    }\n\n    const targetItem = file2Obj(file);\n    targetItem.status = 'uploading';\n    targetItem.percent = e.percent;\n    const nextFileList = updateFileList(targetItem, mergedFileList);\n    onInternalChange(targetItem, nextFileList, e);\n  };\n\n  const onError = (error, response, file) => {\n    // removed\n    if (!getFileItem(file, mergedFileList)) {\n      return;\n    }\n\n    const targetItem = file2Obj(file);\n    targetItem.error = error;\n    targetItem.response = response;\n    targetItem.status = 'error';\n    const nextFileList = updateFileList(targetItem, mergedFileList);\n    onInternalChange(targetItem, nextFileList);\n  };\n\n  const handleRemove = file => {\n    let currentFile;\n    Promise.resolve(typeof onRemove === 'function' ? onRemove(file) : onRemove).then(ret => {\n      var _a; // Prevent removing file\n\n\n      if (ret === false) {\n        return;\n      }\n\n      const removedFileList = removeFileItem(file, mergedFileList);\n\n      if (removedFileList) {\n        currentFile = Object.assign(Object.assign({}, file), {\n          status: 'removed'\n        });\n        mergedFileList === null || mergedFileList === void 0 ? void 0 : mergedFileList.forEach(item => {\n          const matchKey = currentFile.uid !== undefined ? 'uid' : 'name';\n\n          if (item[matchKey] === currentFile[matchKey] && !Object.isFrozen(item)) {\n            item.status = 'removed';\n          }\n        });\n        (_a = upload.current) === null || _a === void 0 ? void 0 : _a.abort(currentFile);\n        onInternalChange(currentFile, removedFileList);\n      }\n    });\n  };\n\n  const onFileDrop = e => {\n    setDragState(e.type);\n\n    if (e.type === 'drop') {\n      onDrop === null || onDrop === void 0 ? void 0 : onDrop(e);\n    }\n  }; // Test needs\n\n\n  React.useImperativeHandle(ref, () => ({\n    onBatchStart,\n    onSuccess,\n    onProgress,\n    onError,\n    fileList: mergedFileList,\n    upload: upload.current\n  }));\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('upload', customizePrefixCls);\n  const rcUploadProps = Object.assign(Object.assign({\n    onBatchStart,\n    onError,\n    onProgress,\n    onSuccess\n  }, props), {\n    data,\n    multiple,\n    action,\n    accept,\n    supportServerRender,\n    prefixCls,\n    disabled: mergedDisabled,\n    beforeUpload: mergedBeforeUpload,\n    onChange: undefined\n  });\n  delete rcUploadProps.className;\n  delete rcUploadProps.style; // Remove id to avoid open by label when trigger is hidden\n  // !children: https://github.com/ant-design/ant-design/issues/14298\n  // disabled: https://github.com/ant-design/ant-design/issues/16478\n  //           https://github.com/ant-design/ant-design/issues/24197\n\n  if (!children || mergedDisabled) {\n    delete rcUploadProps.id;\n  }\n\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n\n  const renderUploadList = (button, buttonVisible) => showUploadList ? /*#__PURE__*/React.createElement(LocaleReceiver, {\n    componentName: \"Upload\",\n    defaultLocale: defaultLocale.Upload\n  }, contextLocale => {\n    const {\n      showRemoveIcon,\n      showPreviewIcon,\n      showDownloadIcon,\n      removeIcon,\n      previewIcon,\n      downloadIcon\n    } = typeof showUploadList === 'boolean' ? {} : showUploadList;\n    return /*#__PURE__*/React.createElement(UploadList, {\n      prefixCls: prefixCls,\n      listType: listType,\n      items: mergedFileList,\n      previewFile: previewFile,\n      onPreview: onPreview,\n      onDownload: onDownload,\n      onRemove: handleRemove,\n      showRemoveIcon: !mergedDisabled && showRemoveIcon,\n      showPreviewIcon: showPreviewIcon,\n      showDownloadIcon: showDownloadIcon,\n      removeIcon: removeIcon,\n      previewIcon: previewIcon,\n      downloadIcon: downloadIcon,\n      iconRender: iconRender,\n      locale: Object.assign(Object.assign({}, contextLocale), propLocale),\n      isImageUrl: isImageUrl,\n      progress: progress,\n      appendAction: button,\n      appendActionVisible: buttonVisible,\n      itemRender: itemRender\n    });\n  }) : button;\n\n  const rtlCls = {\n    [`${prefixCls}-rtl`]: direction === 'rtl'\n  };\n\n  if (type === 'drag') {\n    const dragCls = classNames(prefixCls, {\n      [`${prefixCls}-drag`]: true,\n      [`${prefixCls}-drag-uploading`]: mergedFileList.some(file => file.status === 'uploading'),\n      [`${prefixCls}-drag-hover`]: dragState === 'dragover',\n      [`${prefixCls}-disabled`]: mergedDisabled,\n      [`${prefixCls}-rtl`]: direction === 'rtl'\n    }, hashId);\n    return wrapSSR( /*#__PURE__*/React.createElement(\"span\", {\n      className: classNames(`${prefixCls}-wrapper`, rtlCls, className, hashId)\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: dragCls,\n      onDrop: onFileDrop,\n      onDragOver: onFileDrop,\n      onDragLeave: onFileDrop,\n      style: style\n    }, /*#__PURE__*/React.createElement(RcUpload, Object.assign({}, rcUploadProps, {\n      ref: upload,\n      className: `${prefixCls}-btn`\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-drag-container`\n    }, children))), renderUploadList()));\n  }\n\n  const uploadButtonCls = classNames(prefixCls, `${prefixCls}-select`, {\n    [`${prefixCls}-disabled`]: mergedDisabled\n  });\n\n  const renderUploadButton = uploadButtonStyle => /*#__PURE__*/React.createElement(\"div\", {\n    className: uploadButtonCls,\n    style: uploadButtonStyle\n  }, /*#__PURE__*/React.createElement(RcUpload, Object.assign({}, rcUploadProps, {\n    ref: upload\n  })));\n\n  const uploadButton = renderUploadButton(children ? undefined : {\n    display: 'none'\n  });\n\n  if (listType === 'picture-card' || listType === 'picture-circle') {\n    return wrapSSR( /*#__PURE__*/React.createElement(\"span\", {\n      className: classNames(`${prefixCls}-wrapper`, {\n        [`${prefixCls}-picture-card-wrapper`]: listType === 'picture-card',\n        [`${prefixCls}-picture-circle-wrapper`]: listType === 'picture-circle'\n      }, rtlCls, className, hashId)\n    }, renderUploadList(uploadButton, !!children)));\n  }\n\n  return wrapSSR( /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames(`${prefixCls}-wrapper`, rtlCls, className, hashId)\n  }, uploadButton, renderUploadList()));\n};\n\nconst Upload = /*#__PURE__*/React.forwardRef(InternalUpload);\n\nif (process.env.NODE_ENV !== 'production') {\n  Upload.displayName = 'Upload';\n}\n\nexport default Upload;","map":{"version":3,"names":["_toConsumableArray","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","classNames","RcUpload","useMergedState","React","flushSync","ConfigContext","DisabledContext","LocaleReceiver","defaultLocale","warning","UploadList","file2Obj","getFileItem","removeFileItem","updateFileList","useStyle","LIST_IGNORE","Date","now","InternalUpload","props","ref","fileList","defaultFileList","onRemove","showUploadList","listType","onPreview","onDownload","onChange","onDrop","previewFile","disabled","customDisabled","locale","propLocale","iconRender","isImageUrl","progress","prefixCls","customizePrefixCls","className","type","children","style","itemRender","maxCount","data","multiple","action","accept","supportServerRender","useContext","mergedDisabled","mergedFileList","setMergedFileList","postState","list","dragState","setDragState","useState","upload","useRef","process","env","NODE_ENV","useMemo","timestamp","forEach","file","index","uid","Object","isFrozen","onInternalChange","changedFileList","event","cloneList","slice","changeInfo","mergedBeforeUpload","fileListArgs","beforeUpload","transformFile","parsedFile","defineProperty","configurable","onBatchStart","batchFileInfoList","filteredFileInfoList","filter","info","length","objectFileList","map","newFileList","fileObj","triggerFileObj","originFileObj","clone","File","name","Blob","lastModifiedDate","lastModified","getTime","status","onSuccess","response","xhr","JSON","parse","targetItem","percent","nextFileList","onProgress","onError","error","handleRemove","currentFile","ret","_a","removedFileList","assign","item","matchKey","undefined","current","abort","onFileDrop","useImperativeHandle","getPrefixCls","direction","rcUploadProps","id","wrapSSR","hashId","renderUploadList","button","buttonVisible","createElement","componentName","Upload","contextLocale","showRemoveIcon","showPreviewIcon","showDownloadIcon","removeIcon","previewIcon","downloadIcon","items","appendAction","appendActionVisible","rtlCls","dragCls","some","onDragOver","onDragLeave","uploadButtonCls","renderUploadButton","uploadButtonStyle","uploadButton","display","forwardRef","displayName"],"sources":["D:/year4sem2/evmos/campaign/node_modules/antd/es/upload/Upload.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport classNames from 'classnames';\nimport RcUpload from 'rc-upload';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport * as React from 'react';\nimport { flushSync } from 'react-dom';\nimport { ConfigContext } from '../config-provider';\nimport DisabledContext from '../config-provider/DisabledContext';\nimport LocaleReceiver from '../locale/LocaleReceiver';\nimport defaultLocale from '../locale/en_US';\nimport warning from '../_util/warning';\nimport UploadList from './UploadList';\nimport { file2Obj, getFileItem, removeFileItem, updateFileList } from './utils';\nimport useStyle from './style';\nexport const LIST_IGNORE = `__LIST_IGNORE_${Date.now()}__`;\nconst InternalUpload = (props, ref) => {\n  const {\n    fileList,\n    defaultFileList,\n    onRemove,\n    showUploadList = true,\n    listType = 'text',\n    onPreview,\n    onDownload,\n    onChange,\n    onDrop,\n    previewFile,\n    disabled: customDisabled,\n    locale: propLocale,\n    iconRender,\n    isImageUrl,\n    progress,\n    prefixCls: customizePrefixCls,\n    className,\n    type = 'select',\n    children,\n    style,\n    itemRender,\n    maxCount,\n    data = {},\n    multiple = false,\n    action = '',\n    accept = '',\n    supportServerRender = true\n  } = props;\n  // ===================== Disabled =====================\n  const disabled = React.useContext(DisabledContext);\n  const mergedDisabled = customDisabled !== null && customDisabled !== void 0 ? customDisabled : disabled;\n  const [mergedFileList, setMergedFileList] = useMergedState(defaultFileList || [], {\n    value: fileList,\n    postState: list => list !== null && list !== void 0 ? list : []\n  });\n  const [dragState, setDragState] = React.useState('drop');\n  const upload = React.useRef(null);\n  process.env.NODE_ENV !== \"production\" ? warning('fileList' in props || !('value' in props), 'Upload', '`value` is not a valid prop, do you mean `fileList`?') : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!('transformFile' in props), 'Upload', '`transformFile` is deprecated. Please use `beforeUpload` directly.') : void 0;\n  // Control mode will auto fill file uid if not provided\n  React.useMemo(() => {\n    const timestamp = Date.now();\n    (fileList || []).forEach((file, index) => {\n      if (!file.uid && !Object.isFrozen(file)) {\n        file.uid = `__AUTO__${timestamp}_${index}__`;\n      }\n    });\n  }, [fileList]);\n  const onInternalChange = (file, changedFileList, event) => {\n    let cloneList = _toConsumableArray(changedFileList);\n    // Cut to match count\n    if (maxCount === 1) {\n      cloneList = cloneList.slice(-1);\n    } else if (maxCount) {\n      cloneList = cloneList.slice(0, maxCount);\n    }\n    // Prevent React18 auto batch since input[upload] trigger process at same time\n    // which makes fileList closure problem\n    flushSync(() => {\n      setMergedFileList(cloneList);\n    });\n    const changeInfo = {\n      file: file,\n      fileList: cloneList\n    };\n    if (event) {\n      changeInfo.event = event;\n    }\n    onChange === null || onChange === void 0 ? void 0 : onChange(changeInfo);\n  };\n  const mergedBeforeUpload = (file, fileListArgs) => __awaiter(void 0, void 0, void 0, function* () {\n    const {\n      beforeUpload,\n      transformFile\n    } = props;\n    let parsedFile = file;\n    if (beforeUpload) {\n      const result = yield beforeUpload(file, fileListArgs);\n      if (result === false) {\n        return false;\n      }\n      // Hack for LIST_IGNORE, we add additional info to remove from the list\n      delete file[LIST_IGNORE];\n      if (result === LIST_IGNORE) {\n        Object.defineProperty(file, LIST_IGNORE, {\n          value: true,\n          configurable: true\n        });\n        return false;\n      }\n      if (typeof result === 'object' && result) {\n        parsedFile = result;\n      }\n    }\n    if (transformFile) {\n      parsedFile = yield transformFile(parsedFile);\n    }\n    return parsedFile;\n  });\n  const onBatchStart = batchFileInfoList => {\n    // Skip file which marked as `LIST_IGNORE`, these file will not add to file list\n    const filteredFileInfoList = batchFileInfoList.filter(info => !info.file[LIST_IGNORE]);\n    // Nothing to do since no file need upload\n    if (!filteredFileInfoList.length) {\n      return;\n    }\n    const objectFileList = filteredFileInfoList.map(info => file2Obj(info.file));\n    // Concat new files with prev files\n    let newFileList = _toConsumableArray(mergedFileList);\n    objectFileList.forEach(fileObj => {\n      // Replace file if exist\n      newFileList = updateFileList(fileObj, newFileList);\n    });\n    objectFileList.forEach((fileObj, index) => {\n      // Repeat trigger `onChange` event for compatible\n      let triggerFileObj = fileObj;\n      if (!filteredFileInfoList[index].parsedFile) {\n        // `beforeUpload` return false\n        const {\n          originFileObj\n        } = fileObj;\n        let clone;\n        try {\n          clone = new File([originFileObj], originFileObj.name, {\n            type: originFileObj.type\n          });\n        } catch (e) {\n          clone = new Blob([originFileObj], {\n            type: originFileObj.type\n          });\n          clone.name = originFileObj.name;\n          clone.lastModifiedDate = new Date();\n          clone.lastModified = new Date().getTime();\n        }\n        clone.uid = fileObj.uid;\n        triggerFileObj = clone;\n      } else {\n        // Inject `uploading` status\n        fileObj.status = 'uploading';\n      }\n      onInternalChange(triggerFileObj, newFileList);\n    });\n  };\n  const onSuccess = (response, file, xhr) => {\n    try {\n      if (typeof response === 'string') {\n        response = JSON.parse(response);\n      }\n    } catch (e) {\n      /* do nothing */\n    }\n    // removed\n    if (!getFileItem(file, mergedFileList)) {\n      return;\n    }\n    const targetItem = file2Obj(file);\n    targetItem.status = 'done';\n    targetItem.percent = 100;\n    targetItem.response = response;\n    targetItem.xhr = xhr;\n    const nextFileList = updateFileList(targetItem, mergedFileList);\n    onInternalChange(targetItem, nextFileList);\n  };\n  const onProgress = (e, file) => {\n    // removed\n    if (!getFileItem(file, mergedFileList)) {\n      return;\n    }\n    const targetItem = file2Obj(file);\n    targetItem.status = 'uploading';\n    targetItem.percent = e.percent;\n    const nextFileList = updateFileList(targetItem, mergedFileList);\n    onInternalChange(targetItem, nextFileList, e);\n  };\n  const onError = (error, response, file) => {\n    // removed\n    if (!getFileItem(file, mergedFileList)) {\n      return;\n    }\n    const targetItem = file2Obj(file);\n    targetItem.error = error;\n    targetItem.response = response;\n    targetItem.status = 'error';\n    const nextFileList = updateFileList(targetItem, mergedFileList);\n    onInternalChange(targetItem, nextFileList);\n  };\n  const handleRemove = file => {\n    let currentFile;\n    Promise.resolve(typeof onRemove === 'function' ? onRemove(file) : onRemove).then(ret => {\n      var _a;\n      // Prevent removing file\n      if (ret === false) {\n        return;\n      }\n      const removedFileList = removeFileItem(file, mergedFileList);\n      if (removedFileList) {\n        currentFile = Object.assign(Object.assign({}, file), {\n          status: 'removed'\n        });\n        mergedFileList === null || mergedFileList === void 0 ? void 0 : mergedFileList.forEach(item => {\n          const matchKey = currentFile.uid !== undefined ? 'uid' : 'name';\n          if (item[matchKey] === currentFile[matchKey] && !Object.isFrozen(item)) {\n            item.status = 'removed';\n          }\n        });\n        (_a = upload.current) === null || _a === void 0 ? void 0 : _a.abort(currentFile);\n        onInternalChange(currentFile, removedFileList);\n      }\n    });\n  };\n  const onFileDrop = e => {\n    setDragState(e.type);\n    if (e.type === 'drop') {\n      onDrop === null || onDrop === void 0 ? void 0 : onDrop(e);\n    }\n  };\n  // Test needs\n  React.useImperativeHandle(ref, () => ({\n    onBatchStart,\n    onSuccess,\n    onProgress,\n    onError,\n    fileList: mergedFileList,\n    upload: upload.current\n  }));\n  const {\n    getPrefixCls,\n    direction\n  } = React.useContext(ConfigContext);\n  const prefixCls = getPrefixCls('upload', customizePrefixCls);\n  const rcUploadProps = Object.assign(Object.assign({\n    onBatchStart,\n    onError,\n    onProgress,\n    onSuccess\n  }, props), {\n    data,\n    multiple,\n    action,\n    accept,\n    supportServerRender,\n    prefixCls,\n    disabled: mergedDisabled,\n    beforeUpload: mergedBeforeUpload,\n    onChange: undefined\n  });\n  delete rcUploadProps.className;\n  delete rcUploadProps.style;\n  // Remove id to avoid open by label when trigger is hidden\n  // !children: https://github.com/ant-design/ant-design/issues/14298\n  // disabled: https://github.com/ant-design/ant-design/issues/16478\n  //           https://github.com/ant-design/ant-design/issues/24197\n  if (!children || mergedDisabled) {\n    delete rcUploadProps.id;\n  }\n  const [wrapSSR, hashId] = useStyle(prefixCls);\n  const renderUploadList = (button, buttonVisible) => showUploadList ? /*#__PURE__*/React.createElement(LocaleReceiver, {\n    componentName: \"Upload\",\n    defaultLocale: defaultLocale.Upload\n  }, contextLocale => {\n    const {\n      showRemoveIcon,\n      showPreviewIcon,\n      showDownloadIcon,\n      removeIcon,\n      previewIcon,\n      downloadIcon\n    } = typeof showUploadList === 'boolean' ? {} : showUploadList;\n    return /*#__PURE__*/React.createElement(UploadList, {\n      prefixCls: prefixCls,\n      listType: listType,\n      items: mergedFileList,\n      previewFile: previewFile,\n      onPreview: onPreview,\n      onDownload: onDownload,\n      onRemove: handleRemove,\n      showRemoveIcon: !mergedDisabled && showRemoveIcon,\n      showPreviewIcon: showPreviewIcon,\n      showDownloadIcon: showDownloadIcon,\n      removeIcon: removeIcon,\n      previewIcon: previewIcon,\n      downloadIcon: downloadIcon,\n      iconRender: iconRender,\n      locale: Object.assign(Object.assign({}, contextLocale), propLocale),\n      isImageUrl: isImageUrl,\n      progress: progress,\n      appendAction: button,\n      appendActionVisible: buttonVisible,\n      itemRender: itemRender\n    });\n  }) : button;\n  const rtlCls = {\n    [`${prefixCls}-rtl`]: direction === 'rtl'\n  };\n  if (type === 'drag') {\n    const dragCls = classNames(prefixCls, {\n      [`${prefixCls}-drag`]: true,\n      [`${prefixCls}-drag-uploading`]: mergedFileList.some(file => file.status === 'uploading'),\n      [`${prefixCls}-drag-hover`]: dragState === 'dragover',\n      [`${prefixCls}-disabled`]: mergedDisabled,\n      [`${prefixCls}-rtl`]: direction === 'rtl'\n    }, hashId);\n    return wrapSSR( /*#__PURE__*/React.createElement(\"span\", {\n      className: classNames(`${prefixCls}-wrapper`, rtlCls, className, hashId)\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: dragCls,\n      onDrop: onFileDrop,\n      onDragOver: onFileDrop,\n      onDragLeave: onFileDrop,\n      style: style\n    }, /*#__PURE__*/React.createElement(RcUpload, Object.assign({}, rcUploadProps, {\n      ref: upload,\n      className: `${prefixCls}-btn`\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: `${prefixCls}-drag-container`\n    }, children))), renderUploadList()));\n  }\n  const uploadButtonCls = classNames(prefixCls, `${prefixCls}-select`, {\n    [`${prefixCls}-disabled`]: mergedDisabled\n  });\n  const renderUploadButton = uploadButtonStyle => /*#__PURE__*/React.createElement(\"div\", {\n    className: uploadButtonCls,\n    style: uploadButtonStyle\n  }, /*#__PURE__*/React.createElement(RcUpload, Object.assign({}, rcUploadProps, {\n    ref: upload\n  })));\n  const uploadButton = renderUploadButton(children ? undefined : {\n    display: 'none'\n  });\n  if (listType === 'picture-card' || listType === 'picture-circle') {\n    return wrapSSR( /*#__PURE__*/React.createElement(\"span\", {\n      className: classNames(`${prefixCls}-wrapper`, {\n        [`${prefixCls}-picture-card-wrapper`]: listType === 'picture-card',\n        [`${prefixCls}-picture-circle-wrapper`]: listType === 'picture-circle'\n      }, rtlCls, className, hashId)\n    }, renderUploadList(uploadButton, !!children)));\n  }\n  return wrapSSR( /*#__PURE__*/React.createElement(\"span\", {\n    className: classNames(`${prefixCls}-wrapper`, rtlCls, className, hashId)\n  }, uploadButton, renderUploadList()));\n};\nconst Upload = /*#__PURE__*/React.forwardRef(InternalUpload);\nif (process.env.NODE_ENV !== 'production') {\n  Upload.displayName = 'Upload';\n}\nexport default Upload;"],"mappings":"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"},"metadata":{},"sourceType":"module"}