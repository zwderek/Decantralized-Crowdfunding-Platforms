{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport * as React from 'react';\nimport { useCallback, useMemo, useState } from 'react';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Radio from '../../radio';\nimport warning from '../../_util/warning'; // TODO: warning if use ajax!!!\n\nexport const SELECTION_COLUMN = {};\nexport const SELECTION_ALL = 'SELECT_ALL';\nexport const SELECTION_INVERT = 'SELECT_INVERT';\nexport const SELECTION_NONE = 'SELECT_NONE';\nconst EMPTY_LIST = [];\n\nfunction flattenData(childrenColumnName, data) {\n  let list = [];\n  (data || []).forEach(record => {\n    list.push(record);\n\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(childrenColumnName, record[childrenColumnName])));\n    }\n  });\n  return list;\n}\n\nexport default function useSelection(rowSelection, config) {\n  const {\n    preserveSelectedRowKeys,\n    selectedRowKeys,\n    defaultSelectedRowKeys,\n    getCheckboxProps,\n    onChange: onSelectionChange,\n    onSelect,\n    onSelectAll,\n    onSelectInvert,\n    onSelectNone,\n    onSelectMultiple,\n    columnWidth: selectionColWidth,\n    type: selectionType,\n    selections,\n    fixed,\n    renderCell: customizeRenderCell,\n    hideSelectAll,\n    checkStrictly = true\n  } = rowSelection || {};\n  const {\n    prefixCls,\n    data,\n    pageData,\n    getRecordByKey,\n    getRowKey,\n    expandType,\n    childrenColumnName,\n    locale: tableLocale,\n    getPopupContainer\n  } = config; // ========================= Keys =========================\n\n  const [mergedSelectedKeys, setMergedSelectedKeys] = useMergedState(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST, {\n    value: selectedRowKeys\n  }); // ======================== Caches ========================\n\n  const preserveRecordsRef = React.useRef(new Map());\n  const updatePreserveRecordsCache = useCallback(keys => {\n    if (preserveSelectedRowKeys) {\n      const newCache = new Map(); // Keep key if mark as preserveSelectedRowKeys\n\n      keys.forEach(key => {\n        let record = getRecordByKey(key);\n\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n\n        newCache.set(key, record);\n      }); // Refresh to new cache\n\n      preserveRecordsRef.current = newCache;\n    }\n  }, [getRecordByKey, preserveSelectedRowKeys]); // Update cache with selectedKeys\n\n  React.useEffect(() => {\n    updatePreserveRecordsCache(mergedSelectedKeys);\n  }, [mergedSelectedKeys]);\n  const {\n    keyEntities\n  } = useMemo(() => checkStrictly ? {\n    keyEntities: null\n  } : convertDataToEntities(data, {\n    externalGetKey: getRowKey,\n    childrenPropName: childrenColumnName\n  }), [data, getRowKey, checkStrictly, childrenColumnName]); // Get flatten data\n\n  const flattedData = useMemo(() => flattenData(childrenColumnName, pageData), [pageData, childrenColumnName]); // Get all checkbox props\n\n  const checkboxPropsMap = useMemo(() => {\n    const map = new Map();\n    flattedData.forEach((record, index) => {\n      const key = getRowKey(record, index);\n      const checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      process.env.NODE_ENV !== \"production\" ? warning(!('checked' in checkboxProps || 'defaultChecked' in checkboxProps), 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.') : void 0;\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  const isCheckboxDisabled = useCallback(r => {\n    var _a;\n\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n  const [derivedSelectedKeys, derivedHalfSelectedKeys] = useMemo(() => {\n    if (checkStrictly) {\n      return [mergedSelectedKeys || [], []];\n    }\n\n    const {\n      checkedKeys,\n      halfCheckedKeys\n    } = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled);\n    return [checkedKeys || [], halfCheckedKeys];\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]);\n  const derivedSelectedKeySet = useMemo(() => {\n    const keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  const derivedHalfSelectedKeySet = useMemo(() => selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys), [derivedHalfSelectedKeys, selectionType]); // Save last selected key to enable range selection\n\n  const [lastSelectedKey, setLastSelectedKey] = useState(null); // Reset if rowSelection reset\n\n  React.useEffect(() => {\n    if (!rowSelection) {\n      setMergedSelectedKeys(EMPTY_LIST);\n    }\n  }, [!!rowSelection]);\n  const setSelectedKeys = useCallback((keys, method) => {\n    let availableKeys;\n    let records;\n    updatePreserveRecordsCache(keys);\n\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(key => preserveRecordsRef.current.get(key));\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(key => {\n        const record = getRecordByKey(key);\n\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {\n      type: method\n    });\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]); // ====================== Selections ======================\n  // Trigger single `onSelect` event\n\n  const triggerSingleSelection = useCallback((key, selected, keys, event) => {\n    if (onSelect) {\n      const rows = keys.map(k => getRecordByKey(k));\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n\n    setSelectedKeys(keys, 'single');\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  const mergedSelections = useMemo(() => {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n\n    const selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(selection => {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n\n          onSelect() {\n            setSelectedKeys(data.map((record, index) => getRowKey(record, index)).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\n            }), 'all');\n          }\n\n        };\n      }\n\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n\n          onSelect() {\n            const keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach((record, index) => {\n              const key = getRowKey(record, index);\n              const checkProps = checkboxPropsMap.get(key);\n\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            const keys = Array.from(keySet);\n\n            if (onSelectInvert) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.') : void 0;\n              onSelectInvert(keys);\n            }\n\n            setSelectedKeys(keys, 'invert');\n          }\n\n        };\n      }\n\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n\n          onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }), 'none');\n          }\n\n        };\n      }\n\n      return selection;\n    }).map(selection => Object.assign(Object.assign({}, selection), {\n      onSelect: function () {\n        var _a2;\n\n        var _a;\n\n        for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n          rest[_key] = arguments[_key];\n        }\n\n        (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));\n        setLastSelectedKey(null);\n      }\n    }));\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]); // ======================= Columns ========================\n\n  const transformColumns = useCallback(columns => {\n    var _a; // >>>>>>>>>>> Skip if not exists `rowSelection`\n\n\n    if (!rowSelection) {\n      process.env.NODE_ENV !== \"production\" ? warning(!columns.includes(SELECTION_COLUMN), 'Table', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.') : void 0;\n      return columns.filter(col => col !== SELECTION_COLUMN);\n    } // >>>>>>>>>>> Support selection\n\n\n    let cloneColumns = _toConsumableArray(columns);\n\n    const keySet = new Set(derivedSelectedKeySet); // Record key only need check with enabled\n\n    const recordKeys = flattedData.map(getRowKey).filter(key => !checkboxPropsMap.get(key).disabled);\n    const checkedCurrentAll = recordKeys.every(key => keySet.has(key));\n    const checkedCurrentSome = recordKeys.some(key => keySet.has(key));\n\n    const onSelectAllChange = () => {\n      const changeKeys = [];\n\n      if (checkedCurrentAll) {\n        recordKeys.forEach(key => {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(key => {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n\n      const keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(k => getRecordByKey(k)), changeKeys.map(k => getRecordByKey(k)));\n      setSelectedKeys(keys, 'all');\n      setLastSelectedKey(null);\n    }; // ===================== Render =====================\n    // Title Cell\n\n\n    let title;\n\n    if (selectionType !== 'radio') {\n      let customizeSelections;\n\n      if (mergedSelections) {\n        const menu = {\n          getPopupContainer,\n          items: mergedSelections.map((selection, index) => {\n            const {\n              key,\n              text,\n              onSelect: onSelectionClick\n            } = selection;\n            return {\n              key: key || index,\n              onClick: () => {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              },\n              label: text\n            };\n          })\n        };\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: `${prefixCls}-selection-extra`\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          menu: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n\n      const allDisabledData = flattedData.map((record, index) => {\n        const key = getRowKey(record, index);\n        const checkboxProps = checkboxPropsMap.get(key) || {};\n        return Object.assign({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(_ref => {\n        let {\n          disabled\n        } = _ref;\n        return disabled;\n      });\n      const allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\n      const allDisabledAndChecked = allDisabled && allDisabledData.every(_ref2 => {\n        let {\n          checked\n        } = _ref2;\n        return checked;\n      });\n      const allDisabledSomeChecked = allDisabled && allDisabledData.some(_ref3 => {\n        let {\n          checked\n        } = _ref3;\n        return checked;\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-selection`\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        skipGroup: true\n      }), customizeSelections);\n    } // Body Cell\n\n\n    let renderCell;\n\n    if (selectionType === 'radio') {\n      renderCell = (_, record, index) => {\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, Object.assign({}, checkboxPropsMap.get(key), {\n            checked: checked,\n            onClick: e => e.stopPropagation(),\n            onChange: event => {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          })),\n          checked\n        };\n      };\n    } else {\n      renderCell = (_, record, index) => {\n        var _a;\n\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        const indeterminate = derivedHalfSelectedKeySet.has(key);\n        const checkboxProps = checkboxPropsMap.get(key);\n        let mergedIndeterminate;\n\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          process.env.NODE_ENV !== \"production\" ? warning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.') : void 0;\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        } // Record checked\n\n\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: e => e.stopPropagation(),\n            onChange: _ref4 => {\n              let {\n                nativeEvent\n              } = _ref4;\n              const {\n                shiftKey\n              } = nativeEvent;\n              let startIndex = -1;\n              let endIndex = -1; // Get range of this\n\n              if (shiftKey && checkStrictly) {\n                const pointKeys = new Set([lastSelectedKey, key]);\n                recordKeys.some((recordKey, recordIndex) => {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n\n                  return false;\n                });\n              }\n\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                const rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                const changedKeys = [];\n\n                if (checked) {\n                  rangeKeys.forEach(recordKey => {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.delete(recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(recordKey => {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n\n                const keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(recordKey => getRecordByKey(recordKey)), changedKeys.map(recordKey => getRecordByKey(recordKey)));\n                setSelectedKeys(keys, 'multiple');\n              } else {\n                // Single record selected\n                const originCheckedKeys = derivedSelectedKeys;\n\n                if (checkStrictly) {\n                  const checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  const result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  const {\n                    checkedKeys,\n                    halfCheckedKeys\n                  } = result;\n                  let nextCheckedKeys = checkedKeys; // If remove, we do it again to correction\n\n                  if (checked) {\n                    const tempKeySet = new Set(checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n\n              if (checked) {\n                setLastSelectedKey(null);\n              } else {\n                setLastSelectedKey(key);\n              }\n            }\n          })),\n          checked\n        };\n      };\n    }\n\n    const renderSelectionCell = (_, record, index) => {\n      const {\n        node,\n        checked\n      } = renderCell(_, record, index);\n\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n\n      return node;\n    }; // Insert selection column if not exist\n\n\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(col => {\n        var _a;\n\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        const [expandColumn, ...restColumns] = cloneColumns;\n        cloneColumns = [expandColumn, SELECTION_COLUMN].concat(_toConsumableArray(restColumns));\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN].concat(_toConsumableArray(cloneColumns));\n      }\n    } // Deduplicate selection column\n\n\n    const selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    process.env.NODE_ENV !== \"production\" ? warning(cloneColumns.filter(col => col === SELECTION_COLUMN).length <= 1, 'Table', 'Multiple `SELECTION_COLUMN` exist in `columns`.') : void 0;\n    cloneColumns = cloneColumns.filter((column, index) => column !== SELECTION_COLUMN || index === selectionColumnIndex); // Fixed column logic\n\n    const prevCol = cloneColumns[selectionColumnIndex - 1];\n    const nextCol = cloneColumns[selectionColumnIndex + 1];\n    let mergedFixed = fixed;\n\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    } // Replace with real selection column\n\n\n    const selectionColumn = {\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: `${prefixCls}-selection-column`,\n      title: rowSelection.columnTitle || title,\n      render: renderSelectionCell,\n      [INTERNAL_COL_DEFINE]: {\n        className: `${prefixCls}-selection-col`\n      }\n    };\n    return cloneColumns.map(col => col === SELECTION_COLUMN ? selectionColumn : col);\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n}","map":{"version":3,"names":["_toConsumableArray","DownOutlined","INTERNAL_COL_DEFINE","arrAdd","arrDel","conductCheck","convertDataToEntities","useMergedState","React","useCallback","useMemo","useState","Checkbox","Dropdown","Radio","warning","SELECTION_COLUMN","SELECTION_ALL","SELECTION_INVERT","SELECTION_NONE","EMPTY_LIST","flattenData","childrenColumnName","data","list","forEach","record","push","concat","useSelection","rowSelection","config","preserveSelectedRowKeys","selectedRowKeys","defaultSelectedRowKeys","getCheckboxProps","onChange","onSelectionChange","onSelect","onSelectAll","onSelectInvert","onSelectNone","onSelectMultiple","columnWidth","selectionColWidth","type","selectionType","selections","fixed","renderCell","customizeRenderCell","hideSelectAll","checkStrictly","prefixCls","pageData","getRecordByKey","getRowKey","expandType","locale","tableLocale","getPopupContainer","mergedSelectedKeys","setMergedSelectedKeys","value","preserveRecordsRef","useRef","Map","updatePreserveRecordsCache","keys","newCache","key","current","has","get","set","useEffect","keyEntities","externalGetKey","childrenPropName","flattedData","checkboxPropsMap","map","index","checkboxProps","process","env","NODE_ENV","isCheckboxDisabled","r","_a","disabled","derivedSelectedKeys","derivedHalfSelectedKeys","checkedKeys","halfCheckedKeys","derivedSelectedKeySet","slice","Set","derivedHalfSelectedKeySet","lastSelectedKey","setLastSelectedKey","setSelectedKeys","method","availableKeys","records","undefined","triggerSingleSelection","selected","event","rows","k","mergedSelections","selectionList","selection","text","selectionAll","filter","checkProps","selectInvert","keySet","delete","add","Array","from","selectNone","Object","assign","_a2","_len","arguments","length","rest","_key","call","apply","transformColumns","columns","includes","col","cloneColumns","recordKeys","checkedCurrentAll","every","checkedCurrentSome","some","onSelectAllChange","changeKeys","title","customizeSelections","menu","items","onSelectionClick","onClick","label","createElement","className","allDisabledData","checked","_ref","allDisabled","allDisabledAndChecked","_ref2","allDisabledSomeChecked","_ref3","indeterminate","skipGroup","_","node","e","stopPropagation","nativeEvent","mergedIndeterminate","_ref4","shiftKey","startIndex","endIndex","pointKeys","recordKey","recordIndex","rangeKeys","changedKeys","originCheckedKeys","result","nextCheckedKeys","tempKeySet","renderSelectionCell","findIndex","columnType","expandColumn","restColumns","selectionColumnIndex","indexOf","column","prevCol","nextCol","mergedFixed","selectionColumn","width","columnTitle","render"],"sources":["D:/year4sem2/evmos/campaign/node_modules/antd/es/table/hooks/useSelection.js"],"sourcesContent":["import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport DownOutlined from \"@ant-design/icons/es/icons/DownOutlined\";\nimport { INTERNAL_COL_DEFINE } from 'rc-table';\nimport { arrAdd, arrDel } from \"rc-tree/es/util\";\nimport { conductCheck } from \"rc-tree/es/utils/conductUtil\";\nimport { convertDataToEntities } from \"rc-tree/es/utils/treeUtil\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport * as React from 'react';\nimport { useCallback, useMemo, useState } from 'react';\nimport Checkbox from '../../checkbox';\nimport Dropdown from '../../dropdown';\nimport Radio from '../../radio';\nimport warning from '../../_util/warning';\n// TODO: warning if use ajax!!!\nexport const SELECTION_COLUMN = {};\nexport const SELECTION_ALL = 'SELECT_ALL';\nexport const SELECTION_INVERT = 'SELECT_INVERT';\nexport const SELECTION_NONE = 'SELECT_NONE';\nconst EMPTY_LIST = [];\nfunction flattenData(childrenColumnName, data) {\n  let list = [];\n  (data || []).forEach(record => {\n    list.push(record);\n    if (record && typeof record === 'object' && childrenColumnName in record) {\n      list = [].concat(_toConsumableArray(list), _toConsumableArray(flattenData(childrenColumnName, record[childrenColumnName])));\n    }\n  });\n  return list;\n}\nexport default function useSelection(rowSelection, config) {\n  const {\n    preserveSelectedRowKeys,\n    selectedRowKeys,\n    defaultSelectedRowKeys,\n    getCheckboxProps,\n    onChange: onSelectionChange,\n    onSelect,\n    onSelectAll,\n    onSelectInvert,\n    onSelectNone,\n    onSelectMultiple,\n    columnWidth: selectionColWidth,\n    type: selectionType,\n    selections,\n    fixed,\n    renderCell: customizeRenderCell,\n    hideSelectAll,\n    checkStrictly = true\n  } = rowSelection || {};\n  const {\n    prefixCls,\n    data,\n    pageData,\n    getRecordByKey,\n    getRowKey,\n    expandType,\n    childrenColumnName,\n    locale: tableLocale,\n    getPopupContainer\n  } = config;\n  // ========================= Keys =========================\n  const [mergedSelectedKeys, setMergedSelectedKeys] = useMergedState(selectedRowKeys || defaultSelectedRowKeys || EMPTY_LIST, {\n    value: selectedRowKeys\n  });\n  // ======================== Caches ========================\n  const preserveRecordsRef = React.useRef(new Map());\n  const updatePreserveRecordsCache = useCallback(keys => {\n    if (preserveSelectedRowKeys) {\n      const newCache = new Map();\n      // Keep key if mark as preserveSelectedRowKeys\n      keys.forEach(key => {\n        let record = getRecordByKey(key);\n        if (!record && preserveRecordsRef.current.has(key)) {\n          record = preserveRecordsRef.current.get(key);\n        }\n        newCache.set(key, record);\n      });\n      // Refresh to new cache\n      preserveRecordsRef.current = newCache;\n    }\n  }, [getRecordByKey, preserveSelectedRowKeys]);\n  // Update cache with selectedKeys\n  React.useEffect(() => {\n    updatePreserveRecordsCache(mergedSelectedKeys);\n  }, [mergedSelectedKeys]);\n  const {\n    keyEntities\n  } = useMemo(() => checkStrictly ? {\n    keyEntities: null\n  } : convertDataToEntities(data, {\n    externalGetKey: getRowKey,\n    childrenPropName: childrenColumnName\n  }), [data, getRowKey, checkStrictly, childrenColumnName]);\n  // Get flatten data\n  const flattedData = useMemo(() => flattenData(childrenColumnName, pageData), [pageData, childrenColumnName]);\n  // Get all checkbox props\n  const checkboxPropsMap = useMemo(() => {\n    const map = new Map();\n    flattedData.forEach((record, index) => {\n      const key = getRowKey(record, index);\n      const checkboxProps = (getCheckboxProps ? getCheckboxProps(record) : null) || {};\n      map.set(key, checkboxProps);\n      process.env.NODE_ENV !== \"production\" ? warning(!('checked' in checkboxProps || 'defaultChecked' in checkboxProps), 'Table', 'Do not set `checked` or `defaultChecked` in `getCheckboxProps`. Please use `selectedRowKeys` instead.') : void 0;\n    });\n    return map;\n  }, [flattedData, getRowKey, getCheckboxProps]);\n  const isCheckboxDisabled = useCallback(r => {\n    var _a;\n    return !!((_a = checkboxPropsMap.get(getRowKey(r))) === null || _a === void 0 ? void 0 : _a.disabled);\n  }, [checkboxPropsMap, getRowKey]);\n  const [derivedSelectedKeys, derivedHalfSelectedKeys] = useMemo(() => {\n    if (checkStrictly) {\n      return [mergedSelectedKeys || [], []];\n    }\n    const {\n      checkedKeys,\n      halfCheckedKeys\n    } = conductCheck(mergedSelectedKeys, true, keyEntities, isCheckboxDisabled);\n    return [checkedKeys || [], halfCheckedKeys];\n  }, [mergedSelectedKeys, checkStrictly, keyEntities, isCheckboxDisabled]);\n  const derivedSelectedKeySet = useMemo(() => {\n    const keys = selectionType === 'radio' ? derivedSelectedKeys.slice(0, 1) : derivedSelectedKeys;\n    return new Set(keys);\n  }, [derivedSelectedKeys, selectionType]);\n  const derivedHalfSelectedKeySet = useMemo(() => selectionType === 'radio' ? new Set() : new Set(derivedHalfSelectedKeys), [derivedHalfSelectedKeys, selectionType]);\n  // Save last selected key to enable range selection\n  const [lastSelectedKey, setLastSelectedKey] = useState(null);\n  // Reset if rowSelection reset\n  React.useEffect(() => {\n    if (!rowSelection) {\n      setMergedSelectedKeys(EMPTY_LIST);\n    }\n  }, [!!rowSelection]);\n  const setSelectedKeys = useCallback((keys, method) => {\n    let availableKeys;\n    let records;\n    updatePreserveRecordsCache(keys);\n    if (preserveSelectedRowKeys) {\n      availableKeys = keys;\n      records = keys.map(key => preserveRecordsRef.current.get(key));\n    } else {\n      // Filter key which not exist in the `dataSource`\n      availableKeys = [];\n      records = [];\n      keys.forEach(key => {\n        const record = getRecordByKey(key);\n        if (record !== undefined) {\n          availableKeys.push(key);\n          records.push(record);\n        }\n      });\n    }\n    setMergedSelectedKeys(availableKeys);\n    onSelectionChange === null || onSelectionChange === void 0 ? void 0 : onSelectionChange(availableKeys, records, {\n      type: method\n    });\n  }, [setMergedSelectedKeys, getRecordByKey, onSelectionChange, preserveSelectedRowKeys]);\n  // ====================== Selections ======================\n  // Trigger single `onSelect` event\n  const triggerSingleSelection = useCallback((key, selected, keys, event) => {\n    if (onSelect) {\n      const rows = keys.map(k => getRecordByKey(k));\n      onSelect(getRecordByKey(key), selected, rows, event);\n    }\n    setSelectedKeys(keys, 'single');\n  }, [onSelect, getRecordByKey, setSelectedKeys]);\n  const mergedSelections = useMemo(() => {\n    if (!selections || hideSelectAll) {\n      return null;\n    }\n    const selectionList = selections === true ? [SELECTION_ALL, SELECTION_INVERT, SELECTION_NONE] : selections;\n    return selectionList.map(selection => {\n      if (selection === SELECTION_ALL) {\n        return {\n          key: 'all',\n          text: tableLocale.selectionAll,\n          onSelect() {\n            setSelectedKeys(data.map((record, index) => getRowKey(record, index)).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return !(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled) || derivedSelectedKeySet.has(key);\n            }), 'all');\n          }\n        };\n      }\n      if (selection === SELECTION_INVERT) {\n        return {\n          key: 'invert',\n          text: tableLocale.selectInvert,\n          onSelect() {\n            const keySet = new Set(derivedSelectedKeySet);\n            pageData.forEach((record, index) => {\n              const key = getRowKey(record, index);\n              const checkProps = checkboxPropsMap.get(key);\n              if (!(checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled)) {\n                if (keySet.has(key)) {\n                  keySet.delete(key);\n                } else {\n                  keySet.add(key);\n                }\n              }\n            });\n            const keys = Array.from(keySet);\n            if (onSelectInvert) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, 'Table', '`onSelectInvert` will be removed in future. Please use `onChange` instead.') : void 0;\n              onSelectInvert(keys);\n            }\n            setSelectedKeys(keys, 'invert');\n          }\n        };\n      }\n      if (selection === SELECTION_NONE) {\n        return {\n          key: 'none',\n          text: tableLocale.selectNone,\n          onSelect() {\n            onSelectNone === null || onSelectNone === void 0 ? void 0 : onSelectNone();\n            setSelectedKeys(Array.from(derivedSelectedKeySet).filter(key => {\n              const checkProps = checkboxPropsMap.get(key);\n              return checkProps === null || checkProps === void 0 ? void 0 : checkProps.disabled;\n            }), 'none');\n          }\n        };\n      }\n      return selection;\n    }).map(selection => Object.assign(Object.assign({}, selection), {\n      onSelect: function () {\n        var _a2;\n        var _a;\n        for (var _len = arguments.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n          rest[_key] = arguments[_key];\n        }\n        (_a = selection.onSelect) === null || _a === void 0 ? void 0 : (_a2 = _a).call.apply(_a2, [selection].concat(rest));\n        setLastSelectedKey(null);\n      }\n    }));\n  }, [selections, derivedSelectedKeySet, pageData, getRowKey, onSelectInvert, setSelectedKeys]);\n  // ======================= Columns ========================\n  const transformColumns = useCallback(columns => {\n    var _a;\n    // >>>>>>>>>>> Skip if not exists `rowSelection`\n    if (!rowSelection) {\n      process.env.NODE_ENV !== \"production\" ? warning(!columns.includes(SELECTION_COLUMN), 'Table', '`rowSelection` is not config but `SELECTION_COLUMN` exists in the `columns`.') : void 0;\n      return columns.filter(col => col !== SELECTION_COLUMN);\n    }\n    // >>>>>>>>>>> Support selection\n    let cloneColumns = _toConsumableArray(columns);\n    const keySet = new Set(derivedSelectedKeySet);\n    // Record key only need check with enabled\n    const recordKeys = flattedData.map(getRowKey).filter(key => !checkboxPropsMap.get(key).disabled);\n    const checkedCurrentAll = recordKeys.every(key => keySet.has(key));\n    const checkedCurrentSome = recordKeys.some(key => keySet.has(key));\n    const onSelectAllChange = () => {\n      const changeKeys = [];\n      if (checkedCurrentAll) {\n        recordKeys.forEach(key => {\n          keySet.delete(key);\n          changeKeys.push(key);\n        });\n      } else {\n        recordKeys.forEach(key => {\n          if (!keySet.has(key)) {\n            keySet.add(key);\n            changeKeys.push(key);\n          }\n        });\n      }\n      const keys = Array.from(keySet);\n      onSelectAll === null || onSelectAll === void 0 ? void 0 : onSelectAll(!checkedCurrentAll, keys.map(k => getRecordByKey(k)), changeKeys.map(k => getRecordByKey(k)));\n      setSelectedKeys(keys, 'all');\n      setLastSelectedKey(null);\n    };\n    // ===================== Render =====================\n    // Title Cell\n    let title;\n    if (selectionType !== 'radio') {\n      let customizeSelections;\n      if (mergedSelections) {\n        const menu = {\n          getPopupContainer,\n          items: mergedSelections.map((selection, index) => {\n            const {\n              key,\n              text,\n              onSelect: onSelectionClick\n            } = selection;\n            return {\n              key: key || index,\n              onClick: () => {\n                onSelectionClick === null || onSelectionClick === void 0 ? void 0 : onSelectionClick(recordKeys);\n              },\n              label: text\n            };\n          })\n        };\n        customizeSelections = /*#__PURE__*/React.createElement(\"div\", {\n          className: `${prefixCls}-selection-extra`\n        }, /*#__PURE__*/React.createElement(Dropdown, {\n          menu: menu,\n          getPopupContainer: getPopupContainer\n        }, /*#__PURE__*/React.createElement(\"span\", null, /*#__PURE__*/React.createElement(DownOutlined, null))));\n      }\n      const allDisabledData = flattedData.map((record, index) => {\n        const key = getRowKey(record, index);\n        const checkboxProps = checkboxPropsMap.get(key) || {};\n        return Object.assign({\n          checked: keySet.has(key)\n        }, checkboxProps);\n      }).filter(_ref => {\n        let {\n          disabled\n        } = _ref;\n        return disabled;\n      });\n      const allDisabled = !!allDisabledData.length && allDisabledData.length === flattedData.length;\n      const allDisabledAndChecked = allDisabled && allDisabledData.every(_ref2 => {\n        let {\n          checked\n        } = _ref2;\n        return checked;\n      });\n      const allDisabledSomeChecked = allDisabled && allDisabledData.some(_ref3 => {\n        let {\n          checked\n        } = _ref3;\n        return checked;\n      });\n      title = !hideSelectAll && /*#__PURE__*/React.createElement(\"div\", {\n        className: `${prefixCls}-selection`\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        checked: !allDisabled ? !!flattedData.length && checkedCurrentAll : allDisabledAndChecked,\n        indeterminate: !allDisabled ? !checkedCurrentAll && checkedCurrentSome : !allDisabledAndChecked && allDisabledSomeChecked,\n        onChange: onSelectAllChange,\n        disabled: flattedData.length === 0 || allDisabled,\n        \"aria-label\": customizeSelections ? 'Custom selection' : 'Select all',\n        skipGroup: true\n      }), customizeSelections);\n    }\n    // Body Cell\n    let renderCell;\n    if (selectionType === 'radio') {\n      renderCell = (_, record, index) => {\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        return {\n          node: /*#__PURE__*/React.createElement(Radio, Object.assign({}, checkboxPropsMap.get(key), {\n            checked: checked,\n            onClick: e => e.stopPropagation(),\n            onChange: event => {\n              if (!keySet.has(key)) {\n                triggerSingleSelection(key, true, [key], event.nativeEvent);\n              }\n            }\n          })),\n          checked\n        };\n      };\n    } else {\n      renderCell = (_, record, index) => {\n        var _a;\n        const key = getRowKey(record, index);\n        const checked = keySet.has(key);\n        const indeterminate = derivedHalfSelectedKeySet.has(key);\n        const checkboxProps = checkboxPropsMap.get(key);\n        let mergedIndeterminate;\n        if (expandType === 'nest') {\n          mergedIndeterminate = indeterminate;\n          process.env.NODE_ENV !== \"production\" ? warning(typeof (checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== 'boolean', 'Table', 'set `indeterminate` using `rowSelection.getCheckboxProps` is not allowed with tree structured dataSource.') : void 0;\n        } else {\n          mergedIndeterminate = (_a = checkboxProps === null || checkboxProps === void 0 ? void 0 : checkboxProps.indeterminate) !== null && _a !== void 0 ? _a : indeterminate;\n        }\n        // Record checked\n        return {\n          node: /*#__PURE__*/React.createElement(Checkbox, Object.assign({}, checkboxProps, {\n            indeterminate: mergedIndeterminate,\n            checked: checked,\n            skipGroup: true,\n            onClick: e => e.stopPropagation(),\n            onChange: _ref4 => {\n              let {\n                nativeEvent\n              } = _ref4;\n              const {\n                shiftKey\n              } = nativeEvent;\n              let startIndex = -1;\n              let endIndex = -1;\n              // Get range of this\n              if (shiftKey && checkStrictly) {\n                const pointKeys = new Set([lastSelectedKey, key]);\n                recordKeys.some((recordKey, recordIndex) => {\n                  if (pointKeys.has(recordKey)) {\n                    if (startIndex === -1) {\n                      startIndex = recordIndex;\n                    } else {\n                      endIndex = recordIndex;\n                      return true;\n                    }\n                  }\n                  return false;\n                });\n              }\n              if (endIndex !== -1 && startIndex !== endIndex && checkStrictly) {\n                // Batch update selections\n                const rangeKeys = recordKeys.slice(startIndex, endIndex + 1);\n                const changedKeys = [];\n                if (checked) {\n                  rangeKeys.forEach(recordKey => {\n                    if (keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.delete(recordKey);\n                    }\n                  });\n                } else {\n                  rangeKeys.forEach(recordKey => {\n                    if (!keySet.has(recordKey)) {\n                      changedKeys.push(recordKey);\n                      keySet.add(recordKey);\n                    }\n                  });\n                }\n                const keys = Array.from(keySet);\n                onSelectMultiple === null || onSelectMultiple === void 0 ? void 0 : onSelectMultiple(!checked, keys.map(recordKey => getRecordByKey(recordKey)), changedKeys.map(recordKey => getRecordByKey(recordKey)));\n                setSelectedKeys(keys, 'multiple');\n              } else {\n                // Single record selected\n                const originCheckedKeys = derivedSelectedKeys;\n                if (checkStrictly) {\n                  const checkedKeys = checked ? arrDel(originCheckedKeys, key) : arrAdd(originCheckedKeys, key);\n                  triggerSingleSelection(key, !checked, checkedKeys, nativeEvent);\n                } else {\n                  // Always fill first\n                  const result = conductCheck([].concat(_toConsumableArray(originCheckedKeys), [key]), true, keyEntities, isCheckboxDisabled);\n                  const {\n                    checkedKeys,\n                    halfCheckedKeys\n                  } = result;\n                  let nextCheckedKeys = checkedKeys;\n                  // If remove, we do it again to correction\n                  if (checked) {\n                    const tempKeySet = new Set(checkedKeys);\n                    tempKeySet.delete(key);\n                    nextCheckedKeys = conductCheck(Array.from(tempKeySet), {\n                      checked: false,\n                      halfCheckedKeys\n                    }, keyEntities, isCheckboxDisabled).checkedKeys;\n                  }\n                  triggerSingleSelection(key, !checked, nextCheckedKeys, nativeEvent);\n                }\n              }\n              if (checked) {\n                setLastSelectedKey(null);\n              } else {\n                setLastSelectedKey(key);\n              }\n            }\n          })),\n          checked\n        };\n      };\n    }\n    const renderSelectionCell = (_, record, index) => {\n      const {\n        node,\n        checked\n      } = renderCell(_, record, index);\n      if (customizeRenderCell) {\n        return customizeRenderCell(checked, record, index, node);\n      }\n      return node;\n    };\n    // Insert selection column if not exist\n    if (!cloneColumns.includes(SELECTION_COLUMN)) {\n      // Always after expand icon\n      if (cloneColumns.findIndex(col => {\n        var _a;\n        return ((_a = col[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN';\n      }) === 0) {\n        const [expandColumn, ...restColumns] = cloneColumns;\n        cloneColumns = [expandColumn, SELECTION_COLUMN].concat(_toConsumableArray(restColumns));\n      } else {\n        // Normal insert at first column\n        cloneColumns = [SELECTION_COLUMN].concat(_toConsumableArray(cloneColumns));\n      }\n    }\n    // Deduplicate selection column\n    const selectionColumnIndex = cloneColumns.indexOf(SELECTION_COLUMN);\n    process.env.NODE_ENV !== \"production\" ? warning(cloneColumns.filter(col => col === SELECTION_COLUMN).length <= 1, 'Table', 'Multiple `SELECTION_COLUMN` exist in `columns`.') : void 0;\n    cloneColumns = cloneColumns.filter((column, index) => column !== SELECTION_COLUMN || index === selectionColumnIndex);\n    // Fixed column logic\n    const prevCol = cloneColumns[selectionColumnIndex - 1];\n    const nextCol = cloneColumns[selectionColumnIndex + 1];\n    let mergedFixed = fixed;\n    if (mergedFixed === undefined) {\n      if ((nextCol === null || nextCol === void 0 ? void 0 : nextCol.fixed) !== undefined) {\n        mergedFixed = nextCol.fixed;\n      } else if ((prevCol === null || prevCol === void 0 ? void 0 : prevCol.fixed) !== undefined) {\n        mergedFixed = prevCol.fixed;\n      }\n    }\n    if (mergedFixed && prevCol && ((_a = prevCol[INTERNAL_COL_DEFINE]) === null || _a === void 0 ? void 0 : _a.columnType) === 'EXPAND_COLUMN' && prevCol.fixed === undefined) {\n      prevCol.fixed = mergedFixed;\n    }\n    // Replace with real selection column\n    const selectionColumn = {\n      fixed: mergedFixed,\n      width: selectionColWidth,\n      className: `${prefixCls}-selection-column`,\n      title: rowSelection.columnTitle || title,\n      render: renderSelectionCell,\n      [INTERNAL_COL_DEFINE]: {\n        className: `${prefixCls}-selection-col`\n      }\n    };\n    return cloneColumns.map(col => col === SELECTION_COLUMN ? selectionColumn : col);\n  }, [getRowKey, flattedData, rowSelection, derivedSelectedKeys, derivedSelectedKeySet, derivedHalfSelectedKeySet, selectionColWidth, mergedSelections, expandType, lastSelectedKey, checkboxPropsMap, onSelectMultiple, triggerSingleSelection, isCheckboxDisabled]);\n  return [transformColumns, derivedSelectedKeySet];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}