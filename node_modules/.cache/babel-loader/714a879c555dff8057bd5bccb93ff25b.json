{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n/* eslint-disable max-classes-per-file */\n\nimport { getNumberPrecision, isE, num2str, trimNumber, validateNumber } from \"./numberUtil\";\nimport { supportBigInt } from \"./supportUtil\";\n\nfunction isEmpty(value) {\n  return !value && value !== 0 && !Number.isNaN(value) || !String(value).trim();\n}\n/**\n * We can remove this when IE not support anymore\n */\n\n\nexport var NumberDecimal = /*#__PURE__*/function () {\n  function NumberDecimal(value) {\n    _classCallCheck(this, NumberDecimal);\n\n    _defineProperty(this, \"origin\", '');\n\n    _defineProperty(this, \"number\", void 0);\n\n    _defineProperty(this, \"empty\", void 0);\n\n    if (isEmpty(value)) {\n      this.empty = true;\n      return;\n    }\n\n    this.origin = String(value);\n    this.number = Number(value);\n  }\n\n  _createClass(NumberDecimal, [{\n    key: \"negate\",\n    value: function negate() {\n      return new NumberDecimal(-this.toNumber());\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new NumberDecimal(value);\n      }\n\n      var target = Number(value);\n\n      if (Number.isNaN(target)) {\n        return this;\n      }\n\n      var number = this.number + target; // [Legacy] Back to safe integer\n\n      if (number > Number.MAX_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MAX_SAFE_INTEGER);\n      }\n\n      if (number < Number.MIN_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MIN_SAFE_INTEGER);\n      }\n\n      var maxPrecision = Math.max(getNumberPrecision(this.number), getNumberPrecision(target));\n      return new NumberDecimal(number.toFixed(maxPrecision));\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return Number.isNaN(this.number);\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toNumber() === (target === null || target === void 0 ? void 0 : target.toNumber());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      return this.number;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!safe) {\n        return this.origin;\n      }\n\n      if (this.isInvalidate()) {\n        return '';\n      }\n\n      return num2str(this.number);\n    }\n  }]);\n\n  return NumberDecimal;\n}();\nexport var BigIntDecimal = /*#__PURE__*/function () {\n  /** BigInt will convert `0009` to `9`. We need record the len of decimal */\n  function BigIntDecimal(value) {\n    _classCallCheck(this, BigIntDecimal);\n\n    _defineProperty(this, \"origin\", '');\n\n    _defineProperty(this, \"negative\", void 0);\n\n    _defineProperty(this, \"integer\", void 0);\n\n    _defineProperty(this, \"decimal\", void 0);\n\n    _defineProperty(this, \"decimalLen\", void 0);\n\n    _defineProperty(this, \"empty\", void 0);\n\n    _defineProperty(this, \"nan\", void 0);\n\n    if (isEmpty(value)) {\n      this.empty = true;\n      return;\n    }\n\n    this.origin = String(value); // Act like Number convert\n\n    if (value === '-' || Number.isNaN(value)) {\n      this.nan = true;\n      return;\n    }\n\n    var mergedValue = value; // We need convert back to Number since it require `toFixed` to handle this\n\n    if (isE(mergedValue)) {\n      mergedValue = Number(mergedValue);\n    }\n\n    mergedValue = typeof mergedValue === 'string' ? mergedValue : num2str(mergedValue);\n\n    if (validateNumber(mergedValue)) {\n      var trimRet = trimNumber(mergedValue);\n      this.negative = trimRet.negative;\n      var numbers = trimRet.trimStr.split('.');\n      this.integer = BigInt(numbers[0]);\n      var decimalStr = numbers[1] || '0';\n      this.decimal = BigInt(decimalStr);\n      this.decimalLen = decimalStr.length;\n    } else {\n      this.nan = true;\n    }\n  }\n\n  _createClass(BigIntDecimal, [{\n    key: \"getMark\",\n    value: function getMark() {\n      return this.negative ? '-' : '';\n    }\n  }, {\n    key: \"getIntegerStr\",\n    value: function getIntegerStr() {\n      return this.integer.toString();\n    }\n  }, {\n    key: \"getDecimalStr\",\n    value: function getDecimalStr() {\n      return this.decimal.toString().padStart(this.decimalLen, '0');\n    }\n    /**\n     * Align BigIntDecimal with same decimal length. e.g. 12.3 + 5 = 1230000\n     * This is used for add function only.\n     */\n\n  }, {\n    key: \"alignDecimal\",\n    value: function alignDecimal(decimalLength) {\n      var str = \"\".concat(this.getMark()).concat(this.getIntegerStr()).concat(this.getDecimalStr().padEnd(decimalLength, '0'));\n      return BigInt(str);\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      var clone = new BigIntDecimal(this.toString());\n      clone.negative = !clone.negative;\n      return clone;\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new BigIntDecimal(value);\n      }\n\n      var offset = new BigIntDecimal(value);\n\n      if (offset.isInvalidate()) {\n        return this;\n      }\n\n      var maxDecimalLength = Math.max(this.getDecimalStr().length, offset.getDecimalStr().length);\n      var myAlignedDecimal = this.alignDecimal(maxDecimalLength);\n      var offsetAlignedDecimal = offset.alignDecimal(maxDecimalLength);\n      var valueStr = (myAlignedDecimal + offsetAlignedDecimal).toString(); // We need fill string length back to `maxDecimalLength` to avoid parser failed\n\n      var _trimNumber = trimNumber(valueStr),\n          negativeStr = _trimNumber.negativeStr,\n          trimStr = _trimNumber.trimStr;\n\n      var hydrateValueStr = \"\".concat(negativeStr).concat(trimStr.padStart(maxDecimalLength + 1, '0'));\n      return new BigIntDecimal(\"\".concat(hydrateValueStr.slice(0, -maxDecimalLength), \".\").concat(hydrateValueStr.slice(-maxDecimalLength)));\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return this.nan;\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toString() === (target === null || target === void 0 ? void 0 : target.toString());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      if (this.isNaN()) {\n        return NaN;\n      }\n\n      return Number(this.toString());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!safe) {\n        return this.origin;\n      }\n\n      if (this.isInvalidate()) {\n        return '';\n      }\n\n      return trimNumber(\"\".concat(this.getMark()).concat(this.getIntegerStr(), \".\").concat(this.getDecimalStr())).fullStr;\n    }\n  }]);\n\n  return BigIntDecimal;\n}();\nexport default function getMiniDecimal(value) {\n  // We use BigInt here.\n  // Will fallback to Number if not support.\n  if (supportBigInt()) {\n    return new BigIntDecimal(value);\n  }\n\n  return new NumberDecimal(value);\n}\n/**\n * Align the logic of toFixed to around like 1.5 => 2.\n * If set `cutOnly`, will just remove the over decimal part.\n */\n\nexport function toFixed(numStr, separatorStr, precision) {\n  var cutOnly = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  if (numStr === '') {\n    return '';\n  }\n\n  var _trimNumber2 = trimNumber(numStr),\n      negativeStr = _trimNumber2.negativeStr,\n      integerStr = _trimNumber2.integerStr,\n      decimalStr = _trimNumber2.decimalStr;\n\n  var precisionDecimalStr = \"\".concat(separatorStr).concat(decimalStr);\n  var numberWithoutDecimal = \"\".concat(negativeStr).concat(integerStr);\n\n  if (precision >= 0) {\n    // We will get last + 1 number to check if need advanced number\n    var advancedNum = Number(decimalStr[precision]);\n\n    if (advancedNum >= 5 && !cutOnly) {\n      var advancedDecimal = getMiniDecimal(numStr).add(\"\".concat(negativeStr, \"0.\").concat('0'.repeat(precision)).concat(10 - advancedNum));\n      return toFixed(advancedDecimal.toString(), separatorStr, precision, cutOnly);\n    }\n\n    if (precision === 0) {\n      return numberWithoutDecimal;\n    }\n\n    return \"\".concat(numberWithoutDecimal).concat(separatorStr).concat(decimalStr.padEnd(precision, '0').slice(0, precision));\n  }\n\n  if (precisionDecimalStr === '.0') {\n    return numberWithoutDecimal;\n  }\n\n  return \"\".concat(numberWithoutDecimal).concat(precisionDecimalStr);\n}","map":{"version":3,"names":["_classCallCheck","_createClass","_defineProperty","getNumberPrecision","isE","num2str","trimNumber","validateNumber","supportBigInt","isEmpty","value","Number","isNaN","String","trim","NumberDecimal","empty","origin","number","key","negate","toNumber","add","isInvalidate","target","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","maxPrecision","Math","max","toFixed","equals","lessEquals","toString","safe","arguments","length","undefined","BigIntDecimal","nan","mergedValue","trimRet","negative","numbers","trimStr","split","integer","BigInt","decimalStr","decimal","decimalLen","getMark","getIntegerStr","getDecimalStr","padStart","alignDecimal","decimalLength","str","concat","padEnd","clone","offset","maxDecimalLength","myAlignedDecimal","offsetAlignedDecimal","valueStr","_trimNumber","negativeStr","hydrateValueStr","slice","NaN","fullStr","getMiniDecimal","numStr","separatorStr","precision","cutOnly","_trimNumber2","integerStr","precisionDecimalStr","numberWithoutDecimal","advancedNum","advancedDecimal","repeat"],"sources":["D:/year4sem2/evmos/campaign/node_modules/@rc-component/mini-decimal/es/MiniDecimal.js"],"sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\n/* eslint-disable max-classes-per-file */\nimport { getNumberPrecision, isE, num2str, trimNumber, validateNumber } from \"./numberUtil\";\nimport { supportBigInt } from \"./supportUtil\";\n\nfunction isEmpty(value) {\n  return !value && value !== 0 && !Number.isNaN(value) || !String(value).trim();\n}\n\n/**\n * We can remove this when IE not support anymore\n */\nexport var NumberDecimal = /*#__PURE__*/function () {\n  function NumberDecimal(value) {\n    _classCallCheck(this, NumberDecimal);\n\n    _defineProperty(this, \"origin\", '');\n\n    _defineProperty(this, \"number\", void 0);\n\n    _defineProperty(this, \"empty\", void 0);\n\n    if (isEmpty(value)) {\n      this.empty = true;\n      return;\n    }\n\n    this.origin = String(value);\n    this.number = Number(value);\n  }\n\n  _createClass(NumberDecimal, [{\n    key: \"negate\",\n    value: function negate() {\n      return new NumberDecimal(-this.toNumber());\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new NumberDecimal(value);\n      }\n\n      var target = Number(value);\n\n      if (Number.isNaN(target)) {\n        return this;\n      }\n\n      var number = this.number + target; // [Legacy] Back to safe integer\n\n      if (number > Number.MAX_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MAX_SAFE_INTEGER);\n      }\n\n      if (number < Number.MIN_SAFE_INTEGER) {\n        return new NumberDecimal(Number.MIN_SAFE_INTEGER);\n      }\n\n      var maxPrecision = Math.max(getNumberPrecision(this.number), getNumberPrecision(target));\n      return new NumberDecimal(number.toFixed(maxPrecision));\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return Number.isNaN(this.number);\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toNumber() === (target === null || target === void 0 ? void 0 : target.toNumber());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      return this.number;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!safe) {\n        return this.origin;\n      }\n\n      if (this.isInvalidate()) {\n        return '';\n      }\n\n      return num2str(this.number);\n    }\n  }]);\n\n  return NumberDecimal;\n}();\nexport var BigIntDecimal = /*#__PURE__*/function () {\n  /** BigInt will convert `0009` to `9`. We need record the len of decimal */\n  function BigIntDecimal(value) {\n    _classCallCheck(this, BigIntDecimal);\n\n    _defineProperty(this, \"origin\", '');\n\n    _defineProperty(this, \"negative\", void 0);\n\n    _defineProperty(this, \"integer\", void 0);\n\n    _defineProperty(this, \"decimal\", void 0);\n\n    _defineProperty(this, \"decimalLen\", void 0);\n\n    _defineProperty(this, \"empty\", void 0);\n\n    _defineProperty(this, \"nan\", void 0);\n\n    if (isEmpty(value)) {\n      this.empty = true;\n      return;\n    }\n\n    this.origin = String(value); // Act like Number convert\n\n    if (value === '-' || Number.isNaN(value)) {\n      this.nan = true;\n      return;\n    }\n\n    var mergedValue = value; // We need convert back to Number since it require `toFixed` to handle this\n\n    if (isE(mergedValue)) {\n      mergedValue = Number(mergedValue);\n    }\n\n    mergedValue = typeof mergedValue === 'string' ? mergedValue : num2str(mergedValue);\n\n    if (validateNumber(mergedValue)) {\n      var trimRet = trimNumber(mergedValue);\n      this.negative = trimRet.negative;\n      var numbers = trimRet.trimStr.split('.');\n      this.integer = BigInt(numbers[0]);\n      var decimalStr = numbers[1] || '0';\n      this.decimal = BigInt(decimalStr);\n      this.decimalLen = decimalStr.length;\n    } else {\n      this.nan = true;\n    }\n  }\n\n  _createClass(BigIntDecimal, [{\n    key: \"getMark\",\n    value: function getMark() {\n      return this.negative ? '-' : '';\n    }\n  }, {\n    key: \"getIntegerStr\",\n    value: function getIntegerStr() {\n      return this.integer.toString();\n    }\n  }, {\n    key: \"getDecimalStr\",\n    value: function getDecimalStr() {\n      return this.decimal.toString().padStart(this.decimalLen, '0');\n    }\n    /**\n     * Align BigIntDecimal with same decimal length. e.g. 12.3 + 5 = 1230000\n     * This is used for add function only.\n     */\n\n  }, {\n    key: \"alignDecimal\",\n    value: function alignDecimal(decimalLength) {\n      var str = \"\".concat(this.getMark()).concat(this.getIntegerStr()).concat(this.getDecimalStr().padEnd(decimalLength, '0'));\n      return BigInt(str);\n    }\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      var clone = new BigIntDecimal(this.toString());\n      clone.negative = !clone.negative;\n      return clone;\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      if (this.isInvalidate()) {\n        return new BigIntDecimal(value);\n      }\n\n      var offset = new BigIntDecimal(value);\n\n      if (offset.isInvalidate()) {\n        return this;\n      }\n\n      var maxDecimalLength = Math.max(this.getDecimalStr().length, offset.getDecimalStr().length);\n      var myAlignedDecimal = this.alignDecimal(maxDecimalLength);\n      var offsetAlignedDecimal = offset.alignDecimal(maxDecimalLength);\n      var valueStr = (myAlignedDecimal + offsetAlignedDecimal).toString(); // We need fill string length back to `maxDecimalLength` to avoid parser failed\n\n      var _trimNumber = trimNumber(valueStr),\n          negativeStr = _trimNumber.negativeStr,\n          trimStr = _trimNumber.trimStr;\n\n      var hydrateValueStr = \"\".concat(negativeStr).concat(trimStr.padStart(maxDecimalLength + 1, '0'));\n      return new BigIntDecimal(\"\".concat(hydrateValueStr.slice(0, -maxDecimalLength), \".\").concat(hydrateValueStr.slice(-maxDecimalLength)));\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.empty;\n    }\n  }, {\n    key: \"isNaN\",\n    value: function isNaN() {\n      return this.nan;\n    }\n  }, {\n    key: \"isInvalidate\",\n    value: function isInvalidate() {\n      return this.isEmpty() || this.isNaN();\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(target) {\n      return this.toString() === (target === null || target === void 0 ? void 0 : target.toString());\n    }\n  }, {\n    key: \"lessEquals\",\n    value: function lessEquals(target) {\n      return this.add(target.negate().toString()).toNumber() <= 0;\n    }\n  }, {\n    key: \"toNumber\",\n    value: function toNumber() {\n      if (this.isNaN()) {\n        return NaN;\n      }\n\n      return Number(this.toString());\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var safe = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      if (!safe) {\n        return this.origin;\n      }\n\n      if (this.isInvalidate()) {\n        return '';\n      }\n\n      return trimNumber(\"\".concat(this.getMark()).concat(this.getIntegerStr(), \".\").concat(this.getDecimalStr())).fullStr;\n    }\n  }]);\n\n  return BigIntDecimal;\n}();\nexport default function getMiniDecimal(value) {\n  // We use BigInt here.\n  // Will fallback to Number if not support.\n  if (supportBigInt()) {\n    return new BigIntDecimal(value);\n  }\n\n  return new NumberDecimal(value);\n}\n/**\n * Align the logic of toFixed to around like 1.5 => 2.\n * If set `cutOnly`, will just remove the over decimal part.\n */\n\nexport function toFixed(numStr, separatorStr, precision) {\n  var cutOnly = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  if (numStr === '') {\n    return '';\n  }\n\n  var _trimNumber2 = trimNumber(numStr),\n      negativeStr = _trimNumber2.negativeStr,\n      integerStr = _trimNumber2.integerStr,\n      decimalStr = _trimNumber2.decimalStr;\n\n  var precisionDecimalStr = \"\".concat(separatorStr).concat(decimalStr);\n  var numberWithoutDecimal = \"\".concat(negativeStr).concat(integerStr);\n\n  if (precision >= 0) {\n    // We will get last + 1 number to check if need advanced number\n    var advancedNum = Number(decimalStr[precision]);\n\n    if (advancedNum >= 5 && !cutOnly) {\n      var advancedDecimal = getMiniDecimal(numStr).add(\"\".concat(negativeStr, \"0.\").concat('0'.repeat(precision)).concat(10 - advancedNum));\n      return toFixed(advancedDecimal.toString(), separatorStr, precision, cutOnly);\n    }\n\n    if (precision === 0) {\n      return numberWithoutDecimal;\n    }\n\n    return \"\".concat(numberWithoutDecimal).concat(separatorStr).concat(decimalStr.padEnd(precision, '0').slice(0, precision));\n  }\n\n  if (precisionDecimalStr === '.0') {\n    return numberWithoutDecimal;\n  }\n\n  return \"\".concat(numberWithoutDecimal).concat(precisionDecimalStr);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}