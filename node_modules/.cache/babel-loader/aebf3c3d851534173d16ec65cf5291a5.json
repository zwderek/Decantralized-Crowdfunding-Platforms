{"ast":null,"code":"import toArray from \"rc-util/es/Children/toArray\";\nimport useIsomorphicLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport * as React from 'react';\n\nfunction cuttable(node) {\n  const type = typeof node;\n  return type === 'string' || type === 'number';\n}\n\nfunction getNodesLen(nodeList) {\n  let totalLen = 0;\n  nodeList.forEach(node => {\n    if (cuttable(node)) {\n      totalLen += String(node).length;\n    } else {\n      totalLen += 1;\n    }\n  });\n  return totalLen;\n}\n\nfunction sliceNodes(nodeList, len) {\n  let currLen = 0;\n  const currentNodeList = [];\n\n  for (let i = 0; i < nodeList.length; i += 1) {\n    // Match to return\n    if (currLen === len) {\n      return currentNodeList;\n    }\n\n    const node = nodeList[i];\n    const canCut = cuttable(node);\n    const nodeLen = canCut ? String(node).length : 1;\n    const nextLen = currLen + nodeLen; // Exceed but current not which means we need cut this\n    // This will not happen on validate ReactElement\n\n    if (nextLen > len) {\n      const restLen = len - currLen;\n      currentNodeList.push(String(node).slice(0, restLen));\n      return currentNodeList;\n    }\n\n    currentNodeList.push(node);\n    currLen = nextLen;\n  }\n\n  return nodeList;\n}\n\nconst NONE = 0;\nconst PREPARE = 1;\nconst WALKING = 2;\nconst DONE_WITH_ELLIPSIS = 3;\nconst DONE_WITHOUT_ELLIPSIS = 4;\n\nconst Ellipsis = _ref => {\n  let {\n    enabledMeasure,\n    children,\n    text,\n    width,\n    fontSize,\n    rows,\n    onEllipsis\n  } = _ref;\n  const [[startLen, midLen, endLen], setCutLength] = React.useState([0, 0, 0]);\n  const [walkingState, setWalkingState] = React.useState(NONE);\n  const [singleRowHeight, setSingleRowHeight] = React.useState(0);\n  const singleRowRef = React.useRef(null);\n  const midRowRef = React.useRef(null);\n  const nodeList = React.useMemo(() => toArray(text), [text]);\n  const totalLen = React.useMemo(() => getNodesLen(nodeList), [nodeList]);\n  const mergedChildren = React.useMemo(() => {\n    if (!enabledMeasure || walkingState !== DONE_WITH_ELLIPSIS) {\n      return children(nodeList, false);\n    }\n\n    return children(sliceNodes(nodeList, midLen), midLen < totalLen);\n  }, [enabledMeasure, walkingState, children, nodeList, midLen, totalLen]); // ======================== Walk ========================\n\n  useIsomorphicLayoutEffect(() => {\n    if (enabledMeasure && width && fontSize && totalLen) {\n      setWalkingState(PREPARE);\n      setCutLength([0, Math.ceil(totalLen / 2), totalLen]);\n    }\n  }, [enabledMeasure, width, fontSize, text, totalLen, rows]);\n  useIsomorphicLayoutEffect(() => {\n    var _a;\n\n    if (walkingState === PREPARE) {\n      setSingleRowHeight(((_a = singleRowRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0);\n    }\n  }, [walkingState]);\n  useIsomorphicLayoutEffect(() => {\n    var _a, _b;\n\n    if (singleRowHeight) {\n      if (walkingState === PREPARE) {\n        // Ignore if position is enough\n        const midHeight = ((_a = midRowRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0;\n        const maxHeight = rows * singleRowHeight;\n\n        if (midHeight <= maxHeight) {\n          setWalkingState(DONE_WITHOUT_ELLIPSIS);\n          onEllipsis(false);\n        } else {\n          setWalkingState(WALKING);\n        }\n      } else if (walkingState === WALKING) {\n        if (startLen !== endLen) {\n          const midHeight = ((_b = midRowRef.current) === null || _b === void 0 ? void 0 : _b.offsetHeight) || 0;\n          const maxHeight = rows * singleRowHeight;\n          let nextStartLen = startLen;\n          let nextEndLen = endLen; // We reach the last round\n\n          if (startLen === endLen - 1) {\n            nextEndLen = startLen;\n          } else if (midHeight <= maxHeight) {\n            nextStartLen = midLen;\n          } else {\n            nextEndLen = midLen;\n          }\n\n          const nextMidLen = Math.ceil((nextStartLen + nextEndLen) / 2);\n          setCutLength([nextStartLen, nextMidLen, nextEndLen]);\n        } else {\n          setWalkingState(DONE_WITH_ELLIPSIS);\n          onEllipsis(true);\n        }\n      }\n    }\n  }, [walkingState, startLen, endLen, rows, singleRowHeight]); // ======================= Render =======================\n\n  const measureStyle = {\n    width,\n    whiteSpace: 'normal',\n    margin: 0,\n    padding: 0\n  };\n\n  const renderMeasure = (content, ref, style) => /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    ref: ref,\n    style: Object.assign({\n      position: 'fixed',\n      display: 'block',\n      left: 0,\n      top: 0,\n      zIndex: -9999,\n      visibility: 'hidden',\n      pointerEvents: 'none',\n      fontSize: Math.floor(fontSize / 2) * 2\n    }, style)\n  }, content);\n\n  const renderMeasureSlice = (len, ref) => {\n    const sliceNodeList = sliceNodes(nodeList, len);\n    return renderMeasure(children(sliceNodeList, true), ref, measureStyle);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, mergedChildren, enabledMeasure && walkingState !== DONE_WITH_ELLIPSIS && walkingState !== DONE_WITHOUT_ELLIPSIS && /*#__PURE__*/React.createElement(React.Fragment, null, renderMeasure('lg', singleRowRef, {\n    wordBreak: 'keep-all',\n    whiteSpace: 'nowrap'\n  }), walkingState === PREPARE ? renderMeasure(children(nodeList, false), midRowRef, measureStyle) : renderMeasureSlice(midLen, midRowRef)));\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  Ellipsis.displayName = 'Ellipsis';\n}\n\nexport default Ellipsis;","map":{"version":3,"names":["toArray","useIsomorphicLayoutEffect","React","cuttable","node","type","getNodesLen","nodeList","totalLen","forEach","String","length","sliceNodes","len","currLen","currentNodeList","i","canCut","nodeLen","nextLen","restLen","push","slice","NONE","PREPARE","WALKING","DONE_WITH_ELLIPSIS","DONE_WITHOUT_ELLIPSIS","Ellipsis","_ref","enabledMeasure","children","text","width","fontSize","rows","onEllipsis","startLen","midLen","endLen","setCutLength","useState","walkingState","setWalkingState","singleRowHeight","setSingleRowHeight","singleRowRef","useRef","midRowRef","useMemo","mergedChildren","Math","ceil","_a","current","offsetHeight","_b","midHeight","maxHeight","nextStartLen","nextEndLen","nextMidLen","measureStyle","whiteSpace","margin","padding","renderMeasure","content","ref","style","createElement","Object","assign","position","display","left","top","zIndex","visibility","pointerEvents","floor","renderMeasureSlice","sliceNodeList","Fragment","wordBreak","process","env","NODE_ENV","displayName"],"sources":["D:/year4sem2/evmos/campaign/node_modules/antd/es/typography/Base/Ellipsis.js"],"sourcesContent":["import toArray from \"rc-util/es/Children/toArray\";\nimport useIsomorphicLayoutEffect from \"rc-util/es/hooks/useLayoutEffect\";\nimport * as React from 'react';\nfunction cuttable(node) {\n  const type = typeof node;\n  return type === 'string' || type === 'number';\n}\nfunction getNodesLen(nodeList) {\n  let totalLen = 0;\n  nodeList.forEach(node => {\n    if (cuttable(node)) {\n      totalLen += String(node).length;\n    } else {\n      totalLen += 1;\n    }\n  });\n  return totalLen;\n}\nfunction sliceNodes(nodeList, len) {\n  let currLen = 0;\n  const currentNodeList = [];\n  for (let i = 0; i < nodeList.length; i += 1) {\n    // Match to return\n    if (currLen === len) {\n      return currentNodeList;\n    }\n    const node = nodeList[i];\n    const canCut = cuttable(node);\n    const nodeLen = canCut ? String(node).length : 1;\n    const nextLen = currLen + nodeLen;\n    // Exceed but current not which means we need cut this\n    // This will not happen on validate ReactElement\n    if (nextLen > len) {\n      const restLen = len - currLen;\n      currentNodeList.push(String(node).slice(0, restLen));\n      return currentNodeList;\n    }\n    currentNodeList.push(node);\n    currLen = nextLen;\n  }\n  return nodeList;\n}\nconst NONE = 0;\nconst PREPARE = 1;\nconst WALKING = 2;\nconst DONE_WITH_ELLIPSIS = 3;\nconst DONE_WITHOUT_ELLIPSIS = 4;\nconst Ellipsis = _ref => {\n  let {\n    enabledMeasure,\n    children,\n    text,\n    width,\n    fontSize,\n    rows,\n    onEllipsis\n  } = _ref;\n  const [[startLen, midLen, endLen], setCutLength] = React.useState([0, 0, 0]);\n  const [walkingState, setWalkingState] = React.useState(NONE);\n  const [singleRowHeight, setSingleRowHeight] = React.useState(0);\n  const singleRowRef = React.useRef(null);\n  const midRowRef = React.useRef(null);\n  const nodeList = React.useMemo(() => toArray(text), [text]);\n  const totalLen = React.useMemo(() => getNodesLen(nodeList), [nodeList]);\n  const mergedChildren = React.useMemo(() => {\n    if (!enabledMeasure || walkingState !== DONE_WITH_ELLIPSIS) {\n      return children(nodeList, false);\n    }\n    return children(sliceNodes(nodeList, midLen), midLen < totalLen);\n  }, [enabledMeasure, walkingState, children, nodeList, midLen, totalLen]);\n  // ======================== Walk ========================\n  useIsomorphicLayoutEffect(() => {\n    if (enabledMeasure && width && fontSize && totalLen) {\n      setWalkingState(PREPARE);\n      setCutLength([0, Math.ceil(totalLen / 2), totalLen]);\n    }\n  }, [enabledMeasure, width, fontSize, text, totalLen, rows]);\n  useIsomorphicLayoutEffect(() => {\n    var _a;\n    if (walkingState === PREPARE) {\n      setSingleRowHeight(((_a = singleRowRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0);\n    }\n  }, [walkingState]);\n  useIsomorphicLayoutEffect(() => {\n    var _a, _b;\n    if (singleRowHeight) {\n      if (walkingState === PREPARE) {\n        // Ignore if position is enough\n        const midHeight = ((_a = midRowRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) || 0;\n        const maxHeight = rows * singleRowHeight;\n        if (midHeight <= maxHeight) {\n          setWalkingState(DONE_WITHOUT_ELLIPSIS);\n          onEllipsis(false);\n        } else {\n          setWalkingState(WALKING);\n        }\n      } else if (walkingState === WALKING) {\n        if (startLen !== endLen) {\n          const midHeight = ((_b = midRowRef.current) === null || _b === void 0 ? void 0 : _b.offsetHeight) || 0;\n          const maxHeight = rows * singleRowHeight;\n          let nextStartLen = startLen;\n          let nextEndLen = endLen;\n          // We reach the last round\n          if (startLen === endLen - 1) {\n            nextEndLen = startLen;\n          } else if (midHeight <= maxHeight) {\n            nextStartLen = midLen;\n          } else {\n            nextEndLen = midLen;\n          }\n          const nextMidLen = Math.ceil((nextStartLen + nextEndLen) / 2);\n          setCutLength([nextStartLen, nextMidLen, nextEndLen]);\n        } else {\n          setWalkingState(DONE_WITH_ELLIPSIS);\n          onEllipsis(true);\n        }\n      }\n    }\n  }, [walkingState, startLen, endLen, rows, singleRowHeight]);\n  // ======================= Render =======================\n  const measureStyle = {\n    width,\n    whiteSpace: 'normal',\n    margin: 0,\n    padding: 0\n  };\n  const renderMeasure = (content, ref, style) => /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-hidden\": true,\n    ref: ref,\n    style: Object.assign({\n      position: 'fixed',\n      display: 'block',\n      left: 0,\n      top: 0,\n      zIndex: -9999,\n      visibility: 'hidden',\n      pointerEvents: 'none',\n      fontSize: Math.floor(fontSize / 2) * 2\n    }, style)\n  }, content);\n  const renderMeasureSlice = (len, ref) => {\n    const sliceNodeList = sliceNodes(nodeList, len);\n    return renderMeasure(children(sliceNodeList, true), ref, measureStyle);\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, mergedChildren, enabledMeasure && walkingState !== DONE_WITH_ELLIPSIS && walkingState !== DONE_WITHOUT_ELLIPSIS && /*#__PURE__*/React.createElement(React.Fragment, null, renderMeasure('lg', singleRowRef, {\n    wordBreak: 'keep-all',\n    whiteSpace: 'nowrap'\n  }), walkingState === PREPARE ? renderMeasure(children(nodeList, false), midRowRef, measureStyle) : renderMeasureSlice(midLen, midRowRef)));\n};\nif (process.env.NODE_ENV !== 'production') {\n  Ellipsis.displayName = 'Ellipsis';\n}\nexport default Ellipsis;"],"mappings":"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"},"metadata":{},"sourceType":"module"}